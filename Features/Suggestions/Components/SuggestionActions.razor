@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Features.Suggestions.Models
@using TargetBrowse.Features.Suggestions.Services
@using TargetBrowse.Services
@inject ISuggestionService SuggestionService
@inject IMessageCenterService MessageCenter
@inject ILogger<SuggestionActions> Logger

<div class="suggestion-actions">
    @if (Mode == ActionMode.Individual)
    {
        <!-- Individual Suggestion Actions -->
        <div class="btn-group w-100" role="group">
            <button type="button"
                    class="btn btn-success btn-sm"
                    @onclick="ApproveSuggestion"
                    disabled="@IsProcessing"
                    title="Approve and add to library">
                @if (IsProcessing && PendingAction == "approve")
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                }
                else
                {
                    <i class="bi bi-check-circle me-1"></i>
                }
                Approve
            </button>
            
            <button type="button"
                    class="btn btn-outline-danger btn-sm"
                    @onclick="DenySuggestion"
                    disabled="@IsProcessing"
                    title="Remove from suggestions">
                @if (IsProcessing && PendingAction == "deny")
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                }
                else
                {
                    <i class="bi bi-x-circle me-1"></i>
                }
                Pass
            </button>
            
            <a href="@GetYouTubeUrl(Suggestion.Video)"
               target="_blank"
               class="btn btn-outline-primary btn-sm"
               title="Watch on YouTube">
                <i class="bi bi-play-circle"></i>
            </a>
        </div>
    }
    else if (Mode == ActionMode.Batch)
    {
        <!-- Batch Actions -->
        <div class="btn-group w-100" role="group">
            <button type="button"
                    class="btn btn-success btn-sm"
                    @onclick="ApproveSelected"
                    disabled="@(IsProcessing || !SelectedSuggestionIds.Any())"
                    title="Approve selected suggestions">
                @if (IsProcessing && PendingAction == "approve-batch")
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                }
                else
                {
                    <i class="bi bi-check-circle-fill me-1"></i>
                }
                Approve (@SelectedSuggestionIds.Count)
            </button>
            
            <button type="button"
                    class="btn btn-outline-danger btn-sm"
                    @onclick="DenySelected"
                    disabled="@(IsProcessing || !SelectedSuggestionIds.Any())"
                    title="Remove selected suggestions">
                @if (IsProcessing && PendingAction == "deny-batch")
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                }
                else
                {
                    <i class="bi bi-x-circle-fill me-1"></i>
                }
                Pass (@SelectedSuggestionIds.Count)
            </button>
        </div>
    }
</div>

<!-- Confirmation Modal for Batch Actions -->
@if (ShowConfirmModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (ConfirmAction == "approve-batch")
                        {
                            <i class="bi bi-check-circle text-success me-2"></i>
                            @: Approve Multiple Suggestions
                        }
                        else
                        {
                            <i class="bi bi-x-circle text-danger me-2"></i>
                            @: Remove Multiple Suggestions
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CancelConfirmation" disabled="@IsProcessing"></button>
                </div>
                <div class="modal-body">
                    @if (ConfirmAction == "approve-batch")
                    {
                        <p>Are you sure you want to approve <strong>@SelectedSuggestionIds.Count</strong> suggestions?</p>
                        <p class="text-muted small">These videos will be added to your library for later viewing.</p>
                    }
                    else
                    {
                        <p>Are you sure you want to remove <strong>@SelectedSuggestionIds.Count</strong> suggestions?</p>
                        <p class="text-muted small">These suggestions will be removed from your queue and cannot be recovered.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" 
                            class="btn btn-secondary" 
                            @onclick="CancelConfirmation"
                            disabled="@IsProcessing">
                        Cancel
                    </button>
                    <button type="button"
                            class="btn @(ConfirmAction == "approve-batch" ? "btn-success" : "btn-danger")"
                            @onclick="ConfirmBatchAction"
                            disabled="@IsProcessing">
                        @if (IsProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        @(ConfirmAction == "approve-batch" ? "Approve All" : "Remove All")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter] public ActionMode Mode { get; set; } = ActionMode.Individual;
    [Parameter] public SuggestionDisplayModel? Suggestion { get; set; }
    [Parameter] public HashSet<Guid> SelectedSuggestionIds { get; set; } = new();
    [Parameter] public EventCallback<SuggestionDisplayModel> OnSuggestionApproved { get; set; }
    [Parameter] public EventCallback<SuggestionDisplayModel> OnSuggestionDenied { get; set; }
    [Parameter] public EventCallback<HashSet<Guid>> OnBatchApproved { get; set; }
    [Parameter] public EventCallback<HashSet<Guid>> OnBatchDenied { get; set; }

    private bool IsProcessing { get; set; } = false;
    private string? PendingAction { get; set; }
    private bool ShowConfirmModal { get; set; } = false;
    private string? ConfirmAction { get; set; }
    private string? CurrentUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserIdAsync();
    }

    private async Task GetCurrentUserIdAsync()
    {
        try
        {
            var authState = await AuthenticationStateTask!;
            CurrentUserId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to get current user ID");
            CurrentUserId = null;
        }
    }

    #region Individual Actions

    private async Task ApproveSuggestion()
    {
        if (Suggestion == null || string.IsNullOrEmpty(CurrentUserId) || IsProcessing)
            return;

        await ProcessSuggestionAction("approve", async () =>
        {
            var success = await SuggestionService.ApproveSuggestionAsync(CurrentUserId, Suggestion.Id);
            if (success)
            {
                await MessageCenter.ShowSuccessAsync($"Added '{Suggestion.Video.Title}' to your library!");
                await OnSuggestionApproved.InvokeAsync(Suggestion);
            }
            else
            {
                await MessageCenter.ShowErrorAsync("Failed to approve suggestion");
            }
            return success;
        });
    }

    private async Task DenySuggestion()
    {
        if (Suggestion == null || string.IsNullOrEmpty(CurrentUserId) || IsProcessing)
            return;

        await ProcessSuggestionAction("deny", async () =>
        {
            var success = await SuggestionService.DenySuggestionAsync(CurrentUserId, Suggestion.Id);
            if (success)
            {
                await MessageCenter.ShowSuccessAsync("Suggestion removed from your queue");
                await OnSuggestionDenied.InvokeAsync(Suggestion);
            }
            else
            {
                await MessageCenter.ShowErrorAsync("Failed to remove suggestion");
            }
            return success;
        });
    }

    #endregion

    #region Batch Actions

    private void ApproveSelected()
    {
        if (!SelectedSuggestionIds.Any() || IsProcessing)
            return;

        ConfirmAction = "approve-batch";
        ShowConfirmModal = true;
        StateHasChanged();
    }

    private void DenySelected()
    {
        if (!SelectedSuggestionIds.Any() || IsProcessing)
            return;

        ConfirmAction = "deny-batch";
        ShowConfirmModal = true;
        StateHasChanged();
    }

    private void CancelConfirmation()
    {
        if (IsProcessing) return;
        
        ShowConfirmModal = false;
        ConfirmAction = null;
        StateHasChanged();
    }

    private async Task ConfirmBatchAction()
    {
        if (string.IsNullOrEmpty(CurrentUserId) || IsProcessing || !SelectedSuggestionIds.Any())
            return;

        if (ConfirmAction == "approve-batch")
        {
            await ProcessSuggestionAction("approve-batch", async () =>
            {
                var successCount = 0;
                var totalCount = SelectedSuggestionIds.Count;
                
                foreach (var suggestionId in SelectedSuggestionIds.ToList())
                {
                    var success = await SuggestionService.ApproveSuggestionAsync(CurrentUserId, suggestionId);
                    if (success) successCount++;
                }

                if (successCount > 0)
                {
                    var message = successCount == totalCount 
                        ? $"Approved {successCount} suggestion{(successCount > 1 ? "s" : "")} and added to your library!"
                        : $"Approved {successCount} of {totalCount} suggestions. Some may have failed.";
                    await MessageCenter.ShowSuccessAsync(message);
                    await OnBatchApproved.InvokeAsync(new HashSet<Guid>(SelectedSuggestionIds));
                }
                else
                {
                    await MessageCenter.ShowErrorAsync("Failed to approve any suggestions");
                }
                return successCount > 0;
            });
        }
        else if (ConfirmAction == "deny-batch")
        {
            await ProcessSuggestionAction("deny-batch", async () =>
            {
                var successCount = 0;
                var totalCount = SelectedSuggestionIds.Count;
                
                foreach (var suggestionId in SelectedSuggestionIds.ToList())
                {
                    var success = await SuggestionService.DenySuggestionAsync(CurrentUserId, suggestionId);
                    if (success) successCount++;
                }

                if (successCount > 0)
                {
                    var message = successCount == totalCount 
                        ? $"Removed {successCount} suggestion{(successCount > 1 ? "s" : "")} from your queue"
                        : $"Removed {successCount} of {totalCount} suggestions. Some may have failed.";
                    await MessageCenter.ShowSuccessAsync(message);
                    await OnBatchDenied.InvokeAsync(new HashSet<Guid>(SelectedSuggestionIds));
                }
                else
                {
                    await MessageCenter.ShowErrorAsync("Failed to remove any suggestions");
                }
                return successCount > 0;
            });
        }

        ShowConfirmModal = false;
        ConfirmAction = null;
    }

    #endregion

    #region Helper Methods

    private async Task ProcessSuggestionAction(string action, Func<Task<bool>> actionHandler)
    {
        try
        {
            IsProcessing = true;
            PendingAction = action;
            StateHasChanged();

            await actionHandler();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing suggestion action: {Action}", action);
            await MessageCenter.ShowErrorAsync("An unexpected error occurred. Please try again.");
        }
        finally
        {
            IsProcessing = false;
            PendingAction = null;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Constructs the YouTube URL for a video.
    /// </summary>
    private static string GetYouTubeUrl(VideoInfo video)
    {
        return $"https://www.youtube.com/watch?v={video.YouTubeVideoId}";
    }

    #endregion
}

<style>
    .suggestion-actions .btn-group {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-radius: 0.375rem;
        overflow: hidden;
    }

    .suggestion-actions .btn {
        border: none;
        font-weight: 500;
        transition: all 0.2s ease;
        position: relative;
    }

    .suggestion-actions .btn:hover:not(:disabled) {
        transform: translateY(-1px);
    }

    .suggestion-actions .btn:active {
        transform: translateY(0);
    }

    .suggestion-actions .btn:disabled {
        cursor: not-allowed;
        opacity: 0.6;
    }

    /* Success button styling */
    .suggestion-actions .btn-success {
        background-color: #198754;
        border-color: #198754;
    }

    .suggestion-actions .btn-success:hover:not(:disabled) {
        background-color: #157347;
        box-shadow: 0 4px 8px rgba(25, 135, 84, 0.3);
    }

    /* Danger button styling */
    .suggestion-actions .btn-outline-danger {
        border-color: #dc3545;
        color: #dc3545;
    }

    .suggestion-actions .btn-outline-danger:hover:not(:disabled) {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
        box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
    }

    /* Primary button styling */
    .suggestion-actions .btn-outline-primary {
        border-color: #0d6efd;
        color: #0d6efd;
    }

    .suggestion-actions .btn-outline-primary:hover:not(:disabled) {
        background-color: #0d6efd;
        border-color: #0d6efd;
        color: white;
        box-shadow: 0 4px 8px rgba(13, 110, 253, 0.3);
    }

    /* Loading spinner styling */
    .suggestion-actions .spinner-border-sm {
        width: 0.875rem;
        height: 0.875rem;
    }

    /* Mobile responsive */
    @@media (max-width: 576px) {
        .suggestion-actions .btn {
            font-size: 0.8rem;
            padding: 0.375rem 0.5rem;
        }

        .suggestion-actions .btn .bi {
            font-size: 0.9rem;
        }
    }

    /* Modal styling */
    .modal.show {
        display: block !important;
    }

    .modal-backdrop.show {
        opacity: 0.5;
    }

    /* Batch action count styling */
    .suggestion-actions .btn:has(.spinner-border) {
        min-width: fit-content;
    }

    /* Dark theme adjustments */
    [data-bs-theme="dark"] .suggestion-actions .btn-group {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    [data-bs-theme="dark"] .suggestion-actions .btn-outline-danger {
        border-color: #f5c2c7;
        color: #f5c2c7;
    }

    [data-bs-theme="dark"] .suggestion-actions .btn-outline-danger:hover:not(:disabled) {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
    }

    [data-bs-theme="dark"] .suggestion-actions .btn-outline-primary {
        border-color: #86b7fe;
        color: #86b7fe;
    }

    [data-bs-theme="dark"] .suggestion-actions .btn-outline-primary:hover:not(:disabled) {
        background-color: #0d6efd;
        border-color: #0d6efd;
        color: white;
    }
</style>
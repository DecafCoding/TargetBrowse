@page "/video-library"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Features.Videos.Models
@using TargetBrowse.Features.Videos.Services
@attribute [Authorize]
@rendermode InteractiveServer
@inject IVideoService VideoService
@inject IVideoRatingService VideoRatingService
@inject IMessageCenterService MessageCenter

<PageTitle>Video Library - YouTube Video Tracker</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h2 mb-1">My Video Library</h1>
        <p class="text-muted mb-0">
            Manage and organize your saved YouTube videos for focused content consumption. You have @Videos.Count in your library.
            @if (RatedVideosCount > 0)
            {
                <span class="ms-2">
                    <i class="bi bi-star-fill text-warning"></i>
                    @RatedVideosCount rated
                </span>
            }
        </p>
    </div>
    <div>
        <div class="btn-group" role="group">
            <a href="/video-search"
               class="btn btn-outline-secondary btn-sm">
                <i class="bi bi-search me-1"></i>
                Search Videos
            </a>
            <button type="button"
                    class="btn btn-outline-secondary btn-sm"
                    @onclick="RefreshAsync">
                <i class="bi bi-arrow-clockwise me-1"></i>
                Refresh
            </button>
        </div>
    </div>
</div>

<!-- Debug Information (only visible in development) -->
@if (ShowDebugInfo)
{
    <div class="alert alert-info mb-4">
        <strong>Debug Info:</strong>
        <br />User ID: @CurrentUserId
        <br />Is Loading: @IsLoading
        <br />Videos Count: @Videos.Count
        <br />Filtered Count: @FilteredVideos.Count
        <br />Rated Videos: @RatedVideosCount
        <br />Last Error: @LastError
    </div>
}

<div class="row">
    <div class="col-lg-12">
        <!-- My Video Library Section -->
        <div class="card">
            <div class="card-body">
                @if (IsLoading)
                {
                    <!-- Loading State -->
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="mt-3 text-muted">Loading your video library...</div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(LastError))
                {
                    <!-- Error State -->
                    <div class="alert alert-danger">
                        <h5 class="alert-heading">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Unable to Load Library
                        </h5>
                        <p class="mb-2">@LastError</p>
                        <hr>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-danger btn-sm" @onclick="RefreshAsync">
                                <i class="bi bi-arrow-clockwise me-1"></i>
                                Try Again
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="ToggleDebugInfo">
                                <i class="bi bi-bug me-1"></i>
                                @(ShowDebugInfo ? "Hide" : "Show") Debug Info
                            </button>
                        </div>
                    </div>
                }
                else if (!Videos.Any())
                {
                    <!-- Empty State -->
                    <div class="text-center py-5">
                        <i class="bi bi-collection-play text-muted" style="font-size: 3rem;"></i>
                        <h5 class="mt-3 text-muted">Your video library is empty</h5>
                        <p class="text-muted mb-4">
                            Start building your collection by searching for videos and adding them to your library.
                        </p>
                        <div class="d-flex flex-column flex-sm-row gap-2 justify-content-center">
                            <a href="/video-search" class="btn btn-primary">
                                <i class="bi bi-search me-2"></i>
                                Search for Videos
                            </a>
                            <a href="/suggestions" class="btn btn-outline-secondary">
                                <i class="bi bi-magic me-2"></i>
                                Get Suggestions
                            </a>
                        </div>
                        <small class="text-muted mt-3 d-block">
                            <i class="bi bi-info-circle me-1"></i>
                            Need ideas? Check out suggestions based on your topics and channels
                        </small>
                    </div>
                }
                else
                {
                    <!-- Library Controls - Search, Sort, Filter, and Count on same line -->
                    <div class="d-flex flex-column flex-md-row align-items-start align-items-md-center gap-3 mb-4">
                        <!-- Search Input (takes up remaining space) -->
                        <div class="flex-grow-1" style="min-width: 200px;">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text"
                                       class="form-control"
                                       placeholder="Search your library..."
                                       @bind="LibrarySearchQuery"
                                       @oninput="OnLibrarySearchInput" />
                                @if (!string.IsNullOrWhiteSpace(LibrarySearchQuery))
                                {
                                    <button class="btn btn-outline-secondary"
                                            type="button"
                                            @onclick="ClearLibrarySearch">
                                        <i class="bi bi-x"></i>
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- Rating Filter Dropdown -->
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle"
                                    type="button"
                                    data-bs-toggle="dropdown">
                                <i class="bi bi-star me-1"></i>
                                Filter: @CurrentRatingFilter
                            </button>
                            <ul class="dropdown-menu">
                                <li><button class="dropdown-item" @onclick='() => SetRatingFilter("All Videos")'>All Videos</button></li>
                                <li><button class="dropdown-item" @onclick='() => SetRatingFilter("Rated")'>Rated Videos</button></li>
                                <li><button class="dropdown-item" @onclick='() => SetRatingFilter("Not Rated")'>Not Rated</button></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><button class="dropdown-item" @onclick='() => SetRatingFilter("5 Stars")'>5 Stars</button></li>
                                <li><button class="dropdown-item" @onclick='() => SetRatingFilter("4+ Stars")'>4+ Stars</button></li>
                                <li><button class="dropdown-item" @onclick='() => SetRatingFilter("3+ Stars")'>3+ Stars</button></li>
                                <li><button class="dropdown-item" @onclick='() => SetRatingFilter("1-2 Stars")'>1-2 Stars</button></li>
                            </ul>
                        </div>

                        <!-- Sort Dropdown -->
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle"
                                    type="button"
                                    data-bs-toggle="dropdown">
                                <i class="bi bi-funnel me-1"></i>
                                Sort: @CurrentSortOption
                            </button>
                            <ul class="dropdown-menu">
                                <li><button class="dropdown-item" @onclick="SortByDateAdded">Date Added</button></li>
                                <li><button class="dropdown-item" @onclick="SortByTitle">Title</button></li>
                                <li><button class="dropdown-item" @onclick="SortByDuration">Duration</button></li>
                                <li><button class="dropdown-item" @onclick="SortByViews">Views</button></li>
                                <li><button class="dropdown-item" @onclick="SortByPublished">Published Date</button></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><button class="dropdown-item" @onclick="SortByRating">Rating (High to Low)</button></li>
                                <li><button class="dropdown-item" @onclick="SortByRatingLowToHigh">Rating (Low to High)</button></li>
                            </ul>
                        </div>

                        <!-- Video Count -->
                        <div class="text-muted small text-nowrap">
                            @if (FilteredVideos.Count != Videos.Count)
                            {
                                <span>Showing @FilteredVideos.Count of @Videos.Count videos</span>
                            }
                            else
                            {
                                <span>@Videos.Count videos in your library</span>
                            }
                        </div>
                    </div>

                    <!-- Video Grid using VideoCard Component -->
                    <div class="row">
                        @foreach (var video in FilteredVideos)
                        {
                            <div class="col-md-6 col-lg-4 mb-4">
                                <VideoCard Video="@video"
                                           DisplayMode="VideoDisplayMode.Library"
                                           OnVideoRemoved="@HandleVideoRemoved"
                                           OnWatchStatusChanged="@HandleWatchStatusChanged"
                                           OnVideoRated="@HandleVideoRated" />
                            </div>
                        }
                    </div>

                    <!-- Load More (if needed for large libraries) -->
                    @if (FilteredVideos.Count >= 20)
                    {
                        <div class="text-center mt-4">
                            <button type="button" class="btn btn-outline-primary" disabled>
                                <i class="bi bi-arrow-down-circle me-2"></i>
                                Load More Videos
                            </button>
                            <div class="small text-muted mt-2">
                                Pagination will be implemented for large libraries
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private List<VideoDisplayModel> Videos = new();
    private List<VideoDisplayModel> FilteredVideos = new();
    private bool IsLoading = false;
    private bool IsGridView = true;
    private string LibrarySearchQuery = string.Empty;
    private string CurrentSortOption = "Date Added";
    private string CurrentRatingFilter = "All Videos";
    private string? CurrentUserId;
    private string? LastError;
    private bool ShowDebugInfo = false;

    // Rating statistics properties
    private int RatedVideosCount => Videos.Count(v => v.IsRatedByUser);
    private double AverageUserRating => RatedVideosCount > 0 ? Videos.Where(v => v.IsRatedByUser).Average(v => v.UserStars) : 0;

    // Statistics properties
    private string TotalDurationDisplay => CalculateTotalDuration();
    private int VideosThisWeek => CalculateVideosThisWeek();
    private int VideosThisMonth => CalculateVideosThisMonth();
    private int NotWatchedCount => Videos.Count(v => v.WatchStatus == WatchStatus.NotWatched);
    private int WatchedCount => Videos.Count(v => v.WatchStatus == WatchStatus.Watched);
    private int SkippedCount => Videos.Count(v => v.WatchStatus == WatchStatus.Skipped);
    private double NotWatchedPercentage => Videos.Any() ? (double)NotWatchedCount / Videos.Count * 100 : 0;
    private double WatchedPercentage => Videos.Any() ? (double)WatchedCount / Videos.Count * 100 : 0;
    private double SkippedPercentage => Videos.Any() ? (double)SkippedCount / Videos.Count * 100 : 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadLibraryAsync();
    }

    /// <summary>
    /// Loads the user's video library from the service.
    /// FIXED: Removed mock rating data loading - now uses real database data.
    /// </summary>
    private async Task LoadLibraryAsync()
    {
        try
        {
            IsLoading = true;
            LastError = null;
            StateHasChanged();

            // Get current user using the same pattern as the working components
            var authState = await AuthenticationStateTask!;
            CurrentUserId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(CurrentUserId))
            {
                LastError = "User not authenticated or user ID not available.";
                return;
            }

            // Load videos from database - this should now include rating information
            Videos = await VideoService.GetUserLibraryAsync(CurrentUserId);

            // REMOVED: LoadMockRatingData() call - we now use real data from the database
            
            ApplyFiltersAndSort();

            if (!Videos.Any())
            {
                // This is not an error, just an empty library
                await MessageCenter.ShowInfoAsync("Your video library is empty. Start by searching for videos to add!");
            }
        }
        catch (Exception ex)
        {
            LastError = $"Failed to load video library: {ex.Message}";
            Videos.Clear();
            FilteredVideos.Clear();
            await MessageCenter.ShowErrorAsync(LastError);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Refreshes the library data.
    /// </summary>
    public async Task RefreshAsync()
    {
        await LoadLibraryAsync();
    }

    /// <summary>
    /// Toggles debug information display.
    /// </summary>
    private void ToggleDebugInfo()
    {
        ShowDebugInfo = !ShowDebugInfo;
        StateHasChanged();
    }

    /// <summary>
    /// Handles library search input with debouncing.
    /// </summary>
    private async Task OnLibrarySearchInput(ChangeEventArgs e)
    {
        LibrarySearchQuery = e.Value?.ToString() ?? string.Empty;
        ApplyFiltersAndSort();
        await Task.CompletedTask;
    }

    /// <summary>
    /// Clears the library search.
    /// </summary>
    private void ClearLibrarySearch()
    {
        LibrarySearchQuery = string.Empty;
        ApplyFiltersAndSort();
    }

    /// <summary>
    /// Sets the rating filter.
    /// </summary>
    private void SetRatingFilter(string filter)
    {
        CurrentRatingFilter = filter;
        ApplyFiltersAndSort();
    }

    /// <summary>
    /// Sorts videos by the specified criteria.
    /// </summary>
    private void SortVideos(string sortOption)
    {
        CurrentSortOption = sortOption;
        ApplyFiltersAndSort();
    }

    /// <summary>
    /// Sort methods for dropdown menu items.
    /// </summary>
    private void SortByDateAdded() => SortVideos("Date Added");
    private void SortByTitle() => SortVideos("Title");
    private void SortByDuration() => SortVideos("Duration");
    private void SortByViews() => SortVideos("Views");
    private void SortByPublished() => SortVideos("Published");
    private void SortByRating() => SortVideos("Rating (High to Low)");
    private void SortByRatingLowToHigh() => SortVideos("Rating (Low to High)");

    /// <summary>
    /// Applies current filters and sorting to the video list.
    /// </summary>
    private void ApplyFiltersAndSort()
    {
        var query = Videos.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(LibrarySearchQuery))
        {
            var searchLower = LibrarySearchQuery.ToLowerInvariant();
            query = query.Where(v =>
                v.Title.ToLowerInvariant().Contains(searchLower) ||
                v.ChannelTitle.ToLowerInvariant().Contains(searchLower) ||
                v.Description.ToLowerInvariant().Contains(searchLower) ||
                (v.UserRating?.Notes.ToLowerInvariant().Contains(searchLower) ?? false));
        }

        // Apply rating filter
        query = CurrentRatingFilter switch
        {
            "Rated" => query.Where(v => v.IsRatedByUser),
            "Not Rated" => query.Where(v => !v.IsRatedByUser),
            "5 Stars" => query.Where(v => v.UserStars == 5),
            "4+ Stars" => query.Where(v => v.UserStars >= 4),
            "3+ Stars" => query.Where(v => v.UserStars >= 3),
            "1-2 Stars" => query.Where(v => v.UserStars >= 1 && v.UserStars <= 2),
            _ => query // "All Videos"
        };

        // Apply sorting
        query = CurrentSortOption switch
        {
            "Title" => query.OrderBy(v => v.Title),
            "Duration" => query.OrderByDescending(v => GetDurationInMinutes(v.Duration)),
            "Views" => query.OrderByDescending(v => v.ViewCount ?? 0),
            "Published" => query.OrderByDescending(v => v.PublishedAt),
            "Rating (High to Low)" => query.OrderByDescending(v => v.UserStars).ThenByDescending(v => v.AddedToLibrary),
            "Rating (Low to High)" => query.OrderBy(v => v.UserStars == 0 ? int.MaxValue : v.UserStars).ThenByDescending(v => v.AddedToLibrary),
            _ => query.OrderByDescending(v => v.AddedToLibrary ?? DateTime.MinValue) // Date Added
        };

        FilteredVideos = query.ToList();
        StateHasChanged();
    }

    /// <summary>
    /// Handles when a video is removed from the library.
    /// </summary>
    private async Task HandleVideoRemoved(VideoDisplayModel video)
    {
        Videos.RemoveAll(v => v.Id == video.Id);
        ApplyFiltersAndSort();
        await MessageCenter.ShowSuccessAsync($"Removed '{video.ShortTitle}' from your library.");
    }

    /// <summary>
    /// Handles when a video's watch status is changed.
    /// </summary>
    private async Task HandleWatchStatusChanged((VideoDisplayModel Video, WatchStatus Status) data)
    {
        // Update the video in our local list
        var video = Videos.FirstOrDefault(v => v.Id == data.Video.Id);
        if (video != null)
        {
            video.WatchStatus = data.Status;
        }

        // Apply filters and sort to update the display
        ApplyFiltersAndSort();
        await Task.CompletedTask;
    }

    /// <summary>
    /// Handles when a video is rated or rating is updated.
    /// </summary>
    private async Task HandleVideoRated((VideoDisplayModel Video, VideoRatingModel? Rating) data)
    {
        // Update the video in our local list
        var video = Videos.FirstOrDefault(v => v.Id == data.Video.Id);
        if (video != null)
        {
            video.UserRating = data.Rating;
        }

        // Apply filters and sort to update the display
        ApplyFiltersAndSort();
        await Task.CompletedTask;
    }

    /// <summary>
    /// Gets the count of videos with a specific star rating.
    /// </summary>
    private int GetRatingCount(int stars)
    {
        return Videos.Count(v => v.UserStars == stars);
    }

    /// <summary>
    /// Gets the CSS class for star rating badges.
    /// </summary>
    private string GetStarBadgeClass(int stars)
    {
        return stars switch
        {
            5 => "bg-success",
            4 => "bg-info",
            3 => "bg-warning",
            2 => "bg-danger",
            1 => "bg-dark",
            _ => "bg-secondary"
        };
    }

    /// <summary>
    /// Calculates total duration display string.
    /// </summary>
    private string CalculateTotalDuration()
    {
        var totalMinutes = 0;

        foreach (var video in Videos)
        {
            totalMinutes += GetDurationInMinutes(video.Duration);
        }

        var hours = totalMinutes / 60;
        var minutes = totalMinutes % 60;

        if (hours > 0)
            return $"{hours}h {minutes}m";
        else
            return $"{minutes}m";
    }

    /// <summary>
    /// Helper method to convert ISO 8601 duration to minutes.
    /// </summary>
    private static int GetDurationInMinutes(string? duration)
    {
        if (string.IsNullOrEmpty(duration))
            return 0;

        try
        {
            var timespan = System.Xml.XmlConvert.ToTimeSpan(duration);
            return (int)timespan.TotalMinutes;
        }
        catch
        {
            return 0;
        }
    }

    /// <summary>
    /// Calculates videos added this week.
    /// </summary>
    private int CalculateVideosThisWeek()
    {
        var oneWeekAgo = DateTime.UtcNow.AddDays(-7);
        return Videos.Count(v => v.AddedToLibrary >= oneWeekAgo);
    }

    /// <summary>
    /// Calculates videos added this month.
    /// </summary>
    private int CalculateVideosThisMonth()
    {
        var oneMonthAgo = DateTime.UtcNow.AddDays(-30);
        return Videos.Count(v => v.AddedToLibrary >= oneMonthAgo);
    }
}

<style>
    /* Grid view adjustments */
    .row .video-card {
        height: 100%;
    }

    /* Consistent card heights in grid */
    .row > [class*="col-"] {
        /* display: flex; */
        align-items: stretch;
    }

    /* Hover effects */
    .video-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
    }

    /* Rating summary bar */
    .rating-summary-bar {
        border: 1px solid var(--bs-border-color);
    }

        .rating-summary-bar .badge {
            font-size: 0.7rem;
        }

    /* Dark theme adjustments */
    [data-bs-theme="dark"] .video-card:hover {
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
    }

    [data-bs-theme="dark"] .rating-summary-bar {
        background-color: var(--bs-dark) !important;
        border-color: var(--bs-border-color);
    }

    /* Loading state improvements */
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    /* Filter and sort improvements */
    .dropdown-toggle {
        white-space: nowrap;
    }

    @@media (max-width: 768px) {
        .rating-summary-bar .row {
            text-align: center;
        }

        .rating-summary-bar .col-md-6:last-child {
            margin-top: 0.5rem;
        }
    }
</style>
@inject IVideoService VideoService
@inject IMessageCenterService MessageCenter

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="bi bi-search me-2"></i>
            Video Search
        </h5>
    </div>
    <div class="card-body">
        <!-- Search Form -->
        <EditForm Model="@SearchModel" OnValidSubmit="@HandleSearchSubmit">
            <DataAnnotationsValidator />
            
            <div class="mb-4">
                <label for="searchQuery" class="form-label">Search Videos</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-search"></i>
                    </span>
                    <InputText @bind-Value="SearchModel.SearchQuery" 
                              class="form-control" 
                              id="searchQuery" 
                              placeholder="Enter video title, keywords, or YouTube URL"
                              disabled="@IsSearching" />
                    <button type="submit" 
                           class="btn btn-primary" 
                           disabled="@IsSearching">
                        @if (IsSearching)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Search
                    </button>
                </div>
                <ValidationMessage For="@(() => SearchModel.SearchQuery)" class="text-danger" />
            </div>

            <!-- Advanced Options (Always Expanded, Single Row) -->
            <div class="border rounded p-3 mb-4 bg-light advanced-options">
                <div class="row g-3">
                    <div class="col-lg-3 col-md-6 col-12">
                        <label for="maxResults" class="form-label">Max Results</label>
                        <InputSelect @bind-Value="SearchModel.MaxResults" class="form-select" id="maxResults">
                            <option value="10">10 results</option>
                            <option value="25">25 results</option>
                            <option value="50">50 results</option>
                        </InputSelect>
                    </div>
                    <div class="col-lg-3 col-md-6 col-12">
                        <label for="sortOrder" class="form-label">Sort By</label>
                        <InputSelect @bind-Value="SearchModel.SortOrder" class="form-select" id="sortOrder">
                            <option value="@VideoSortOrder.Relevance">Relevance</option>
                            <option value="@VideoSortOrder.UploadDate">Upload Date</option>
                            <option value="@VideoSortOrder.ViewCount">View Count</option>
                            <option value="@VideoSortOrder.Rating">Rating</option>
                        </InputSelect>
                    </div>
                    <div class="col-lg-3 col-md-6 col-12">
                        <label for="durationFilter" class="form-label">Duration</label>
                        <InputSelect @bind-Value="SearchModel.DurationFilter" class="form-select" id="durationFilter">
                            <option value="@VideoDurationFilter.Any">Any Duration</option>
                            <option value="@VideoDurationFilter.Short">Short (&lt; 4 min)</option>
                            <option value="@VideoDurationFilter.Medium">Medium (4-20 min)</option>
                            <option value="@VideoDurationFilter.Long">Long (&gt; 20 min)</option>
                        </InputSelect>
                    </div>
                    <div class="col-lg-3 col-md-6 col-12">
                        <label for="dateFilter" class="form-label">Upload Date</label>
                        <InputSelect @bind-Value="SearchModel.DateFilter" class="form-select" id="dateFilter">
                            <option value="@VideoDateFilter.Any">Any Date</option>
                            <option value="@VideoDateFilter.LastHour">Last Hour</option>
                            <option value="@VideoDateFilter.Today">Today</option>
                            <option value="@VideoDateFilter.ThisWeek">This Week</option>
                            <option value="@VideoDateFilter.ThisMonth">This Month</option>
                            <option value="@VideoDateFilter.ThisYear">This Year</option>
                        </InputSelect>
                    </div>
                </div>
            </div>
        </EditForm>

        <!-- Search Results -->
        @if (SearchResults.Any())
        {
            <hr>
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h6 class="mb-0">
                    <i class="bi bi-collection-play me-2"></i>
                    Search Results (@SearchResults.Count)
                </h6>
                <button class="btn btn-outline-secondary btn-sm" @onclick="ClearResults">
                    <i class="bi bi-x-circle me-1"></i>
                    Clear
                </button>
            </div>

            <!-- Results Grid -->
            <div class="row g-3 video-results-grid">
                @foreach (var video in SearchResults)
                {
                    <div class="col-12 col-md-6 col-lg-4">
                        <VideoSearchResult Video="@video" 
                                         OnVideoAdded="@HandleVideoAddedToLibrary" />
                    </div>
                }
            </div>

            @if (SearchResults.Count >= SearchModel.MaxResults)
            {
                <div class="alert alert-info mt-4 mb-0">
                    <i class="bi bi-info-circle me-2"></i>
                    Showing maximum @SearchModel.MaxResults results. Try using more specific keywords to narrow your search.
                </div>
            }
        }
        else if (HasSearched && !IsSearching)
        {
            <hr>
            <div class="text-center text-muted py-5">
                <i class="bi bi-search" style="font-size: 3rem;"></i>
                <div class="mt-3 h5">No videos found matching your search criteria</div>
                <small>Try different keywords or adjust your search filters.</small>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback OnVideoAdded { get; set; }

    private VideoSearchModel SearchModel = new();
    private List<VideoDisplayModel> SearchResults = new();
    private bool IsSearching = false;
    private bool HasSearched = false;
    private string? CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        // Get current user ID - this would come from authentication
        CurrentUserId = "temp-user-id"; // TODO: Get from AuthenticationStateProvider
        await Task.CompletedTask;
    }

    /// <summary>
    /// Handles the search form submission.
    /// </summary>
    private async Task HandleSearchSubmit()
    {
        if (string.IsNullOrWhiteSpace(CurrentUserId))
        {
            await MessageCenter.ShowErrorAsync("Please log in to search for videos.");
            return;
        }

        IsSearching = true;
        HasSearched = true;
        
        try
        {
            // If it's a direct video URL, handle it differently
            if (SearchModel.IsDirectVideoUrl)
            {
                var videoId = SearchModel.ExtractVideoId();
                if (!string.IsNullOrEmpty(videoId))
                {
                    var video = await VideoService.GetVideoByIdAsync(CurrentUserId, videoId);
                    if (video != null)
                    {
                        SearchResults = new List<VideoDisplayModel> { video };
                    }
                    else
                    {
                        await MessageCenter.ShowErrorAsync("Video not found or unavailable.");
                        SearchResults.Clear();
                    }
                }
                else
                {
                    await MessageCenter.ShowErrorAsync("Invalid YouTube video URL.");
                    SearchResults.Clear();
                }
            }
            else
            {
                // Regular search
                SearchResults = await VideoService.SearchVideosAsync(CurrentUserId, SearchModel);
            }

            if (!SearchResults.Any() && !SearchModel.IsDirectVideoUrl)
            {
                await MessageCenter.ShowErrorAsync("No videos found. Try different search terms or check your internet connection.");
            }
        }
        catch (Exception ex)
        {
            await MessageCenter.ShowErrorAsync($"Search failed: {ex.Message}");
            SearchResults.Clear();
        }
        finally
        {
            IsSearching = false;
        }
    }

    /// <summary>
    /// Clears the current search results.
    /// </summary>
    private void ClearResults()
    {
        SearchResults.Clear();
        HasSearched = false;
    }

    /// <summary>
    /// Handles when a video is added to the library from search results.
    /// </summary>
    private async Task HandleVideoAddedToLibrary(VideoDisplayModel video)
    {
        // Update the video's library status in current results
        var existingVideo = SearchResults.FirstOrDefault(v => v.YouTubeVideoId == video.YouTubeVideoId);
        if (existingVideo != null)
        {
            existingVideo.IsInLibrary = true;
            existingVideo.AddedToLibrary = DateTime.UtcNow;
        }

        // Notify parent component
        await OnVideoAdded.InvokeAsync();
        
        await MessageCenter.ShowSuccessAsync($"Added '{video.ShortTitle}' to your library!");
    }

    /// <summary>
    /// Resets the search form and results.
    /// </summary>
    public void Reset()
    {
        SearchModel = new VideoSearchModel();
        SearchResults.Clear();
        HasSearched = false;
        StateHasChanged();
    }
}

<style>
    .advanced-options {
        background-color: var(--bs-light) !important;
        border: 1px solid var(--bs-border-color) !important;
    }

    .video-results-grid {
        min-height: 200px;
    }

    /* Dark theme adjustments */
    [data-bs-theme="dark"] .advanced-options {
        background-color: var(--bs-dark) !important;
        border-color: var(--bs-border-color) !important;
    }

    /* Responsive form adjustments */
    @@media (max-width: 768px) {
        .advanced-options .row {
            row-gap: 1rem;
        }
    }

    /* Better spacing for search results */
    .video-results-grid > .col-12,
    .video-results-grid > .col-md-6,
    .video-results-grid > .col-lg-4 {
        margin-bottom: 0;
    }
</style>

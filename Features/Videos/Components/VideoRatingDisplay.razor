@* Component for displaying existing video ratings in a compact format *@

@if (Rating != null)
{
    <div class="video-rating-display @CssClass">
        @if (ShowStars)
        {
            <div class="rating-stars me-2">
                @for (int i = 1; i <= 5; i++)
                {
                    var starClass = i <= Rating.Stars ? "bi-star-fill text-warning" : "bi-star text-muted";
                    <i class="bi @starClass rating-star"></i>
                }
            </div>
        }

        @if (ShowLabel)
        {
            <div class="rating-info flex-grow-1">
                <div class="rating-summary">
                    <span class="rating-stars-text fw-medium @Rating.StarCssClass">
                        @Rating.Stars stars
                    </span>
                </div>

                @if (ShowNotes && !string.IsNullOrWhiteSpace(Rating.Notes))
                {
                    <div class="rating-notes mt-1">
                        @if (TruncateNotes && Rating.Notes.Length > MaxNotesLength)
                        {
                            <small class="text-muted">
                                @Rating.Notes.Substring(0, MaxNotesLength)...
                                @if (ShowExpandButton)
                                {
                                    <button type="button"
                                            class="btn btn-link btn-sm p-0 ms-1 text-decoration-none"
                                            @onclick="ToggleNotesExpansion">
                                        <small>@(NotesExpanded ? "Show less" : "Show more")</small>
                                    </button>
                                }
                            </small>
                        }
                        else
                        {
                            <small class="text-muted">@Rating.Notes</small>
                        }
                    </div>
                }

                @if (ShowTimestamp)
                {
                    <div class="rating-timestamp mt-1">
                        <small class="text-muted">
                            <i class="bi bi-clock me-1"></i>
                            @Rating.CreatedAtDisplay
                            @if (Rating.WasModified)
                            {
                                <span class="ms-1">(@Rating.UpdatedAtDisplay)</span>
                            }
                        </small>
                    </div>
                }
            </div>
        }

        @if (ShowActions && OnEdit.HasDelegate)
        {
            <div class="rating-actions ms-2">
                <button type="button"
                        class="btn btn-outline-secondary btn-sm"
                        @onclick="() => OnEdit.InvokeAsync(Rating)"
                        title="Edit rating">
                    <i class="bi bi-pencil"></i>
                </button>
            </div>
        }
    </div>
}
else if (ShowEmptyState)
{
    <div class="video-rating-display rating-empty @CssClass">
        <div class="d-flex align-items-center text-muted">
            <div class="rating-stars me-2">
                @for (int i = 1; i <= 5; i++)
                {
                    <i class="bi bi-star text-muted rating-star"></i>
                }
            </div>
            <small>Not rated yet</small>
        </div>
    </div>
}

@code {
    /// <summary>
    /// The video rating to display.
    /// </summary>
    [Parameter] public VideoRatingModel? Rating { get; set; }

    /// <summary>
    /// Additional CSS classes to apply.
    /// </summary>
    [Parameter] public string CssClass { get; set; } = string.Empty;

    /// <summary>
    /// Whether to show the star rating visual.
    /// </summary>
    [Parameter] public bool ShowStars { get; set; } = true;

    /// <summary>
    /// Whether to show the rating label and info.
    /// </summary>
    [Parameter] public bool ShowLabel { get; set; } = true;

    /// <summary>
    /// Whether to show the rating notes.
    /// </summary>
    [Parameter] public bool ShowNotes { get; set; } = true;

    /// <summary>
    /// Whether to show the rating timestamp.
    /// </summary>
    [Parameter] public bool ShowTimestamp { get; set; } = false;

    /// <summary>
    /// Whether to show action buttons (edit, etc.).
    /// </summary>
    [Parameter] public bool ShowActions { get; set; } = false;

    /// <summary>
    /// Whether to show empty state when no rating exists.
    /// </summary>
    [Parameter] public bool ShowEmptyState { get; set; } = false;

    /// <summary>
    /// Whether to truncate long notes.
    /// </summary>
    [Parameter] public bool TruncateNotes { get; set; } = true;

    /// <summary>
    /// Maximum length for notes before truncation.
    /// </summary>
    [Parameter] public int MaxNotesLength { get; set; } = 100;

    /// <summary>
    /// Whether to show expand/collapse button for notes.
    /// </summary>
    [Parameter] public bool ShowExpandButton { get; set; } = true;

    /// <summary>
    /// Callback when edit button is clicked.
    /// </summary>
    [Parameter] public EventCallback<VideoRatingModel> OnEdit { get; set; }

    private bool NotesExpanded = false;

    /// <summary>
    /// Gets the rating text based on stars.
    /// </summary>
    private string GetRatingText()
    {
        if (Rating == null) return string.Empty;

        return Rating.Stars switch
        {
            1 => "Poor",
            2 => "Fair",
            3 => "Good",
            4 => "Very Good",
            5 => "Excellent",
            _ => "No rating"
        };
    }

    /// <summary>
    /// Toggles the notes expansion state.
    /// </summary>
    private void ToggleNotesExpansion()
    {
        NotesExpanded = !NotesExpanded;
        StateHasChanged();
    }
}

<style>
    .video-rating-display {
        display: flex;
        align-items: flex-start;
        min-height: 1.5rem;
    }

    .rating-stars {
        display: flex;
        align-items: center;
        gap: 0.125rem;
        flex-shrink: 0;
    }

    .rating-star {
        font-size: 0.875rem;
    }

    .rating-info {
        min-width: 0; /* Allow flex item to shrink */
    }

    .rating-summary {
        display: flex;
        align-items: baseline;
        flex-wrap: wrap;
        gap: 0.25rem;
    }

    .rating-stars-text {
        font-size: 0.875rem;
    }

    .rating-text {
        font-size: 0.8rem;
    }

    .rating-notes {
        line-height: 1.3;
        word-break: break-word;
    }

    .rating-timestamp {
        font-size: 0.75rem;
    }

    .rating-actions {
        flex-shrink: 0;
    }

    .rating-empty {
        opacity: 0.7;
    }

    /* Compact variant */
    .video-rating-display.compact {
        align-items: center;
    }

    .compact .rating-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .compact .rating-notes,
    .compact .rating-timestamp {
        display: none;
    }

    /* Inline variant for tight spaces */
    .video-rating-display.inline {
        flex-direction: row;
        align-items: center;
        gap: 0.5rem;
    }

    .inline .rating-info {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .inline .rating-notes,
    .inline .rating-timestamp {
        display: none;
    }

    /* Dark theme support */
    [data-bs-theme="dark"] .rating-star {
        opacity: 0.9;
    }

    [data-bs-theme="dark"] .rating-empty {
        opacity: 0.6;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .rating-summary

    {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.125rem;
    }

    .rating-actions .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }

    .rating-star {
        font-size: 0.8rem;
    }

    }
</style>
@* Component for displaying existing video ratings in a compact format *@

@if (Rating != null)
{
    <div class="video-rating-display @CssClass">
        @if (ShowStars)
        {
            <div class="rating-stars me-2">
                @for (int i = 1; i <= 5; i++)
                {
                    var starClass = i <= Rating.Stars ? "bi-star-fill text-warning" : "bi-star text-muted";
                    <i class="bi @starClass rating-star"></i>
                }
            </div>
        }

        @if (ShowLabel)
        {
            <div class="rating-info flex-grow-1">
                <div class="rating-summary">
                    <span class="rating-stars-text fw-medium @Rating.StarCssClass">
                        @Rating.Stars stars
                    </span>
                </div>

                @if (ShowNotes && !string.IsNullOrWhiteSpace(Rating.Notes))
                {
                    <div class="rating-notes mt-1">
                        @if (TruncateNotes && Rating.Notes.Length > MaxNotesLength)
                        {
                            <small class="text-muted">
                                @Rating.Notes.Substring(0, MaxNotesLength)...
                                @if (ShowExpandButton)
                                {
                                    <button type="button"
                                            class="btn btn-link btn-sm p-0 ms-1 text-decoration-none"
                                            @onclick="ToggleNotesExpansion">
                                        <small>@(NotesExpanded ? "Show less" : "Show more")</small>
                                    </button>
                                }
                            </small>
                        }
                        else
                        {
                            <small class="text-muted">@Rating.Notes</small>
                        }
                    </div>
                }

                @if (ShowTimestamp)
                {
                    <div class="rating-timestamp mt-1">
                        <small class="text-muted">
                            <i class="bi bi-clock me-1"></i>
                            @Rating.CreatedAtDisplay
                            @if (Rating.WasModified)
                            {
                                <span class="ms-1">(@Rating.UpdatedAtDisplay)</span>
                            }
                        </small>
                    </div>
                }
            </div>
        }

        @if (ShowActions && OnEdit.HasDelegate)
        {
            <div class="rating-actions ms-2">
                <button type="button"
                        class="btn btn-outline-secondary btn-sm"
                        @onclick="() => OnEdit.InvokeAsync(Rating)"
                        title="Edit rating">
                    <i class="bi bi-pencil"></i>
                </button>
            </div>
        }
    </div>
}
else if (ShowEmptyState)
{
    <div class="video-rating-display rating-empty @CssClass">
        <div class="d-flex align-items-center text-muted">
            <div class="rating-stars me-2">
                @for (int i = 1; i <= 5; i++)
                {
                    <i class="bi bi-star text-muted rating-star"></i>
                }
            </div>
            <small>Not rated yet</small>
        </div>
    </div>
}
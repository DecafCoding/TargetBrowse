@* Reusable star rating input component with hover effects and accessibility *@

<div class="star-rating-input @CssClass" role="radiogroup" aria-label="Star rating">
    @for (int i = 1; i <= 5; i++)
    {
        var starNumber = i; // Capture for closure
        var isSelected = starNumber <= CurrentValue;
        var isHovered = starNumber <= HoveredValue;
        var starClass = GetStarClass(starNumber, isSelected, isHovered);

        <button type="button"
                class="star-button @starClass"
                @onclick="() => OnStarClick(starNumber)"
                @onmouseenter="() => OnStarHover(starNumber)"
                @onmouseleave="OnStarLeave"
                @onfocus="() => OnStarHover(starNumber)"
                @onblur="OnStarLeave"
                aria-pressed="@isSelected.ToString().ToLower()"
                aria-label="@GetStarAriaLabel(starNumber)"
                disabled="@IsDisabled"
                title="@GetStarTitle(starNumber)">
            <i class="bi bi-star-fill"></i>
        </button>
    }

    @if (ShowLabel && CurrentValue > 0)
    {
        <span class="rating-label ms-2 @LabelCssClass">
            @GetRatingLabel()
        </span>
    }
</div>

@code {
    /// <summary>
    /// The current star rating value (1-5).
    /// </summary>
    [Parameter] public int CurrentValue { get; set; }

    /// <summary>
    /// Callback when the rating value changes.
    /// </summary>
    [Parameter] public EventCallback<int> CurrentValueChanged { get; set; }

    /// <summary>
    /// Additional CSS classes to apply to the container.
    /// </summary>
    [Parameter] public string CssClass { get; set; } = string.Empty;

    /// <summary>
    /// CSS classes for the rating label.
    /// </summary>
    [Parameter] public string LabelCssClass { get; set; } = "text-muted small";

    /// <summary>
    /// Whether to show the rating label text.
    /// </summary>
    [Parameter] public bool ShowLabel { get; set; } = true;

    /// <summary>
    /// Whether the component is disabled.
    /// </summary>
    [Parameter] public bool IsDisabled { get; set; }

    /// <summary>
    /// Size of the stars (small, normal, large).
    /// </summary>
    [Parameter] public StarSize Size { get; set; } = StarSize.Normal;

    /// <summary>
    /// Whether to show hover effects.
    /// </summary>
    [Parameter] public bool ShowHoverEffects { get; set; } = true;

    private int HoveredValue = 0;

    /// <summary>
    /// Handles star click events.
    /// </summary>
    private async Task OnStarClick(int starValue)
    {
        if (IsDisabled) return;

        // Allow clicking the same star to clear the rating
        var newValue = CurrentValue == starValue ? 0 : starValue;
        CurrentValue = newValue;
        await CurrentValueChanged.InvokeAsync(newValue);
    }

    /// <summary>
    /// Handles star hover events.
    /// </summary>
    private void OnStarHover(int starValue)
    {
        if (IsDisabled || !ShowHoverEffects) return;
        HoveredValue = starValue;
        StateHasChanged();
    }

    /// <summary>
    /// Handles mouse leave events.
    /// </summary>
    private void OnStarLeave()
    {
        if (IsDisabled || !ShowHoverEffects) return;
        HoveredValue = 0;
        StateHasChanged();
    }

    /// <summary>
    /// Gets the CSS class for a specific star.
    /// </summary>
    private string GetStarClass(int starNumber, bool isSelected, bool isHovered)
    {
        var classes = new List<string>();

        // Size classes
        classes.Add(Size switch
        {
            StarSize.Small => "star-small",
            StarSize.Large => "star-large",
            _ => "star-normal"
        });

        // State classes
        if (IsDisabled)
        {
            classes.Add("star-disabled");
        }
        else if (isHovered && ShowHoverEffects)
        {
            classes.Add("star-hovered");
        }
        else if (isSelected)
        {
            classes.Add("star-selected");
        }
        else
        {
            classes.Add("star-unselected");
        }

        return string.Join(" ", classes);
    }

    /// <summary>
    /// Gets the ARIA label for a specific star.
    /// </summary>
    private string GetStarAriaLabel(int starNumber)
    {
        var label = starNumber switch
        {
            1 => "1 star - Poor",
            2 => "2 stars - Fair",
            3 => "3 stars - Good",
            4 => "4 stars - Very Good",
            5 => "5 stars - Excellent",
            _ => $"{starNumber} stars"
        };

        return CurrentValue == starNumber ? $"{label} (currently selected)" : label;
    }

    /// <summary>
    /// Gets the title tooltip for a specific star.
    /// </summary>
    private string GetStarTitle(int starNumber) => GetStarAriaLabel(starNumber);

    /// <summary>
    /// Gets the rating label text.
    /// </summary>
    private string GetRatingLabel()
    {
        return CurrentValue switch
        {
            1 => "Poor",
            2 => "Fair",
            3 => "Good",
            4 => "Very Good",
            5 => "Excellent",
            _ => "No rating"
        };
    }
}

<style>
    .star-rating-input {
        display: flex;
        align-items: center;
        gap: 0.125rem;
    }

    .star-button {
        background: none;
        border: none;
        padding: 0.25rem;
        cursor: pointer;
        transition: all 0.15s ease;
        border-radius: 0.25rem;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

        .star-button:focus {
            outline: 2px solid var(--bs-focus-ring-color);
            outline-offset: 2px;
        }

    /* Star sizes */
    .star-small {
        font-size: 0.875rem;
        padding: 0.125rem;
    }

    .star-normal {
        font-size: 1.25rem;
        padding: 0.25rem;
    }

    .star-large {
        font-size: 1.5rem;
        padding: 0.375rem;
    }

    /* Star states */
    .star-unselected {
        color: #dee2e6;
    }

        .star-unselected:hover {
            color: #ffc107;
            transform: scale(1.1);
        }

    .star-selected {
        color: #ffc107;
    }

        .star-selected:hover {
            color: #ffb300;
            transform: scale(1.1);
        }

    .star-hovered {
        color: #ffc107;
        transform: scale(1.1);
    }

    .star-disabled {
        color: #6c757d;
        cursor: not-allowed;
        opacity: 0.6;
    }

        .star-disabled:hover {
            transform: none;
        }

    .rating-label {
        white-space: nowrap;
        font-weight: 500;
    }

    /* Dark theme support */
    [data-bs-theme="dark"] .star-unselected {
        color: #495057;
    }

    [data-bs-theme="dark"] .star-disabled {
        color: #495057;
    }

    /* Focus and accessibility improvements */
    .star-button:focus-visible {
        outline: 2px solid var(--bs-primary);
        outline-offset: 2px;
    }

    /* Animation for smooth transitions */
    .star-button i {
        transition: transform 0.15s ease;
    }

    .star-button:hover:not(.star-disabled) i {
        transform: scale(1.1);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .star-normal

    {
        font-size: 1.1rem;
        padding: 0.2rem;
    }

    .star-large {
        font-size: 1.3rem;
        padding: 0.3rem;
    }

    }
</style>

@code {
    /// <summary>
    /// Enumeration for star rating sizes.
    /// </summary>
    public enum StarSize
    {
        Small,
        Normal,
        Large
    }
}
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Data.Entities
@using TargetBrowse.Features.Videos.Models
@using TargetBrowse.Features.Videos.Services
@using TargetBrowse.Services
@using System.Net

<div class="card video-card h-100">
    <!-- Video Thumbnail Container -->
    <div class="position-relative video-thumbnail-container">
        <img src="@GetThumbnailUrl()"
             class="card-img-top video-thumbnail"
             alt="@((MarkupString)WebUtility.HtmlDecode(Video.Title))"
             loading="lazy"
             onerror="window.VideoCardHelpers.handleThumbnailError(this, '@Video.YouTubeVideoId')" />

        <!-- Duration Badge - Only show if we have a valid formatted duration -->
            <span class="badge bg-dark position-absolute duration-badge">
                @Video.DurationDisplay
            </span>

        <!-- Status Badges -->
        @if (DisplayMode == VideoDisplayMode.Search && Video.IsInLibrary)
        {
            <span class="badge bg-success position-absolute status-badge">
                <i class="bi bi-check-circle me-1"></i>
                In Library
            </span>
        }
        else if (DisplayMode == VideoDisplayMode.Library && Video.WatchStatus != WatchStatus.NotWatched)
        {
            <span class="badge @GetWatchStatusBadgeClass() position-absolute status-badge">
                <i class="bi @GetWatchStatusIcon() me-1"></i>
                @GetWatchStatusText()
            </span>
        }

        <!-- Rating Badge -->
        @if (DisplayMode == VideoDisplayMode.Library && Video.IsRatedByUser)
        {
            <span class="badge bg-warning position-absolute rating-badge">
                <i class="bi bi-star-fill me-1"></i>
                @Video.UserStars
            </span>
        }

        <!-- Remove Button (Library Mode Only) -->
        @if (DisplayMode == VideoDisplayMode.Library)
        {
            <button type="button"
                    class="btn btn-sm btn-outline-danger position-absolute remove-btn"
                    @onclick="() => ConfirmRemove()"
                    title="Remove from library">
                <i class="bi bi-x"></i>
            </button>
        }
    </div>

    <!-- Video Details -->
    <div class="card-body d-flex flex-column p-3">
        <!-- Video Title -->
        <h6 class="card-title video-title mb-2">
            <a href="@Video.YouTubeUrl"
               target="_blank"
               class="text-decoration-none title-link"
               title="@((MarkupString)WebUtility.HtmlDecode(Video.Title))">
                @((MarkupString)WebUtility.HtmlDecode(Video.Title))
                @if (Video.Title.Length < 50)
                {
                    <i class="bi bi-box-arrow-up-right ms-1 small"></i>
                }
            </a>
        </h6>

        <!-- Channel Name -->
        <div class="video-channel mb-2">
            <small class="text-muted">
                <i class="bi bi-person-circle me-1"></i>
                @Video.ChannelTitle
            </small>
        </div>

        <!-- Video Metadata -->
        <div class="video-metadata mb-2">
            <small class="text-muted">
                @if (!string.IsNullOrEmpty(Video.ViewCountDisplay))
                {
                    <span title="@(Video.ViewCount?.ToString("N0")) views">
                        <i class="bi bi-eye me-1"></i>@Video.ViewCountDisplay
                    </span>
                    <span class="mx-1">•</span>
                }

                @if (!string.IsNullOrEmpty(Video.LikeCountDisplay))
                {
                    <span title="@(Video.LikeCount?.ToString("N0")) likes">
                        <i class="bi bi-hand-thumbs-up me-1"></i>@Video.LikeCountDisplay
                    </span>
                    <span class="mx-1">•</span>
                }

                @if (!string.IsNullOrEmpty(Video.CommentCountDisplay))
                {
                    <span title="@(Video.CommentCount?.ToString("N0")) comments">
                        <i class="bi bi-chat me-1"></i>@Video.CommentCountDisplay
                    </span>
                    <span class="mx-1">•</span>
                }

                <span title="Published @Video.PublishedAt.ToString("MMM d, yyyy")">@Video.PublishedDisplay</span>

                @if (DisplayMode == VideoDisplayMode.Library && Video.AddedToLibrary.HasValue)
                {
                    <span class="mx-1">•</span>
                    <span title="Added to library @Video.AddedToLibrary?.ToString("MMM d, yyyy h:mm tt")">
                        Added @Video.AddedToLibraryDisplay
                    </span>
                }
            </small>
        </div>

        <!-- Video Type -->
        <div class="video-type mb-2">
            <small class="text-muted">
                <i class="bi bi-tag me-1"></i>@Video.VideoTypeDisplay
            </small>
        </div>

        <!-- Rating Display (Library Mode) -->
        @if (DisplayMode == VideoDisplayMode.Library)
        {
            <div class="video-rating mb-2">
                @if (Video.IsRatedByUser)
                {
                    <div class="video-rating-display compact">
                        <div class="d-flex align-items-center">
                            <div class="rating-stars me-2">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    var starClass = i <= Video.UserStars ? "bi-star-fill text-warning" : "bi-star text-muted";
                                    <i class="bi @starClass rating-star"></i>
                                }
                            </div>
                            <button type="button"
                                    class="btn btn-link btn-sm p-0 text-decoration-none"
                                    @onclick="() => ShowRatingModal()">
                                <small>Edit Rating</small>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="video-rating-display rating-empty compact">
                        <div class="d-flex align-items-center text-muted">
                            <div class="rating-stars me-2">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="bi bi-star text-muted rating-star"></i>
                                }
                            </div>
                            <button type="button"
                                    class="btn btn-link btn-sm p-0 text-decoration-none"
                                    @onclick="() => ShowRatingModal()">
                                <small>Rate Video</small>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }

        <!-- Video Description -->
        @if (!string.IsNullOrEmpty(Video.ShortDescription) && Video.ShortDescription != "No description available")
        {
            <p class="video-description text-muted small mb-3 flex-grow-1">
                @Video.ShortDescription
            </p>
        }

        <!-- Action Buttons -->
        <div class="mt-auto">
            @if (DisplayMode == VideoDisplayMode.Search)
            {
                <!-- Search Mode Actions -->
                <div class="d-flex gap-2">
                    @if (!Video.IsInLibrary)
                    {
                        <button type="button"
                                class="btn btn-primary btn-sm flex-fill"
                                @onclick="AddToLibrary"
                                disabled="@IsAddingToLibrary">
                            @if (IsAddingToLibrary)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-bookmark-plus me-1"></i>
                            }
                            Library
                        </button>
                    }
                    else
                    {
                        <button type="button"
                                class="btn btn-success btn-sm flex-fill"
                                disabled>
                            <i class="bi bi-check-circle me-1"></i>
                            In Library
                        </button>
                    }

                    <a href="@Video.YouTubeUrl"
                       target="_blank"
                       class="btn btn-outline-secondary btn-sm flex-fill">
                        <i class="bi bi-play-circle me-1"></i>
                        Watch
                        <i class="bi bi-box-arrow-up-right ms-1 small"></i>
                    </a>
                </div>
            }
            else if (DisplayMode == VideoDisplayMode.Library)
            {
                <!-- Library Mode Actions -->
                <div class="d-grid gap-2">
                    <!-- Watch Status Row -->
                    <div class="d-flex gap-2">
                        <button type="button"
                                class="btn @(Video.WatchStatus == WatchStatus.Watched ? "btn-success" : "btn-outline-success") btn-sm flex-fill"
                                @onclick="() => MarkAsWatched()"
                                disabled="@IsUpdatingStatus"
                                title="Mark as watched">
                            @if (IsUpdatingStatus && PendingStatus == WatchStatus.Watched)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-check-circle me-1"></i>
                            }
                            Watched
                        </button>

                        <button type="button"
                                class="btn @(Video.WatchStatus == WatchStatus.Skipped ? "btn-danger" : "btn-outline-danger") btn-sm flex-fill"
                                @onclick="() => MarkAsSkipped()"
                                disabled="@IsUpdatingStatus"
                                title="Mark as skipped">
                            @if (IsUpdatingStatus && PendingStatus == WatchStatus.Skipped)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-hand-thumbs-down me-1"></i>
                            }
                            Pass
                        </button>

                        <a href="/watch/@Video.YouTubeVideoId"
                           target="_blank"
                           class="btn btn-outline-secondary btn-sm flex-fill">
                            Watch
                            <i class="bi bi-box-arrow-up-right ms-1 small"></i>
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Confirmation Modal (Library Mode Only) -->
@if (DisplayMode == VideoDisplayMode.Library && ShowConfirmDialog)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Remove Video</h5>
                    <button type="button" class="btn-close" @@onclick="CancelRemove"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to remove <strong>"@Video.ShortTitle"</strong> from your library?</p>
                    <p class="text-muted small mb-0">This action cannot be undone, but you can always add the video back later.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @@onclick="CancelRemove">Cancel</button>
                    <button type="button"
                            class="btn btn-danger"
                            @onclick="RemoveVideo"
                            disabled="@IsRemoving">
                        @if (IsRemoving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Remove Video
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Rating Modal -->
<VideoRatingModal IsVisible="@ShowRatingModalDialog"
                  Model="@CurrentRatingModel"
                  OnClose="@HideRatingModal"
                  OnSubmit="@HandleRatingSubmit"
                  OnDelete="@HandleRatingDelete" />

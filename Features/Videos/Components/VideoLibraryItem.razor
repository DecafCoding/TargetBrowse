@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Data.Entities
@inject IVideoService VideoService
@inject IMessageCenterService MessageCenter

@if (IsGridView)
{
    <!-- Grid View Card -->
    <div class="card video-library-item h-100">
        <div class="position-relative">
            <img src="@GetThumbnailUrl()" 
                 class="card-img-top video-thumbnail-grid" 
                 alt="@Video.Title"
                 loading="lazy" 
                 onerror="this.src='https://img.youtube.com/vi/@Video.YouTubeVideoId/hqdefault.jpg'" />
            
            <!-- Duration Badge -->
            @if (!string.IsNullOrEmpty(Video.DurationDisplay))
            {
                <span class="badge bg-dark position-absolute bottom-0 end-0 m-2">
                    @Video.DurationDisplay
                </span>
            }
            
            <!-- Watch Status Badge -->
            @if (Video.WatchStatus != WatchStatus.NotWatched)
            {
                <span class="badge @GetWatchStatusBadgeClass() position-absolute top-0 start-0 m-2">
                    <i class="bi @GetWatchStatusIcon() me-1"></i>
                    @GetWatchStatusText()
                </span>
            }
            
            <!-- Remove Button -->
            <button type="button" 
                   class="btn btn-sm btn-outline-danger position-absolute top-0 end-0 m-2 remove-btn"
                   @onclick="() => ConfirmRemove()"
                   title="Remove from library">
                <i class="bi bi-x"></i>
            </button>
        </div>
        
        <div class="card-body d-flex flex-column">
            <!-- Video Title -->
            <h6 class="card-title mb-2">
                <a href="@Video.YouTubeUrl" 
                   target="_blank" 
                   class="text-decoration-none"
                   title="@Video.Title">
                    @Video.ShortTitle
                    <i class="bi bi-box-arrow-up-right ms-1 small"></i>
                </a>
            </h6>
            
            <!-- Channel Info -->
            <div class="text-muted small mb-2">
                <a href="@Video.ChannelUrl" 
                   target="_blank" 
                   class="text-muted text-decoration-none">
                    <i class="bi bi-person-circle me-1"></i>
                    @Video.ChannelTitle
                </a>
            </div>
            
            <!-- Video Stats -->
            <div class="small text-muted mb-3 flex-grow-1">
                <div class="d-flex justify-content-between">
                    <span title="@(Video.ViewCount?.ToString("N0")) views">
                        @Video.ViewCountDisplay views
                    </span>
                    @if (Video.LikeCount.HasValue && Video.LikeCount > 0)
                    {
                        <span title="@(Video.LikeCount?.ToString("N0")) likes">
                            @Video.LikeCountDisplay likes
                        </span>
                    }
                </div>
                <div class="mt-1">
                    <span title="Published @Video.PublishedAt.ToString("MMM d, yyyy")">
                        @Video.PublishedDisplay
                    </span>
                    <span class="mx-2">•</span>
                    <span title="Added to library @Video.AddedToLibrary?.ToString("MMM d, yyyy h:mm tt")">
                        Added @Video.AddedToLibraryDisplay
                    </span>
                </div>
            </div>
            
            <!-- Watch Status Actions -->
            <div class="mt-auto">
                <div class="btn-group w-100 mb-2" role="group">
                    <button type="button" 
                           class="btn @(Video.WatchStatus == WatchStatus.Watched ? "btn-success" : "btn-outline-success") btn-sm"
                           @onclick="() => MarkAsWatched()"
                           disabled="@IsUpdatingStatus"
                           title="Mark as watched">
                        @if (IsUpdatingStatus && PendingStatus == WatchStatus.Watched)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-check-circle"></i>
                        }
                    </button>
                    <button type="button" 
                           class="btn @(Video.WatchStatus == WatchStatus.Skipped ? "btn-secondary" : "btn-outline-secondary") btn-sm"
                           @onclick="() => MarkAsSkipped()"
                           disabled="@IsUpdatingStatus"
                           title="Mark as skipped">
                        @if (IsUpdatingStatus && PendingStatus == WatchStatus.Skipped)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-skip-forward"></i>
                        }
                    </button>
                    <a href="@Video.YouTubeUrl" 
                       target="_blank" 
                       class="btn btn-primary btn-sm flex-fill">
                        <i class="bi bi-play-circle me-1"></i>
                        Watch
                    </a>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- List View Card -->
    <div class="card video-library-item">
        <div class="row g-0">
            <!-- Video Thumbnail -->
            <div class="col-md-3">
                <div class="position-relative">
                    <img src="@GetThumbnailUrl()" 
                         class="img-fluid rounded-start video-thumbnail-list" 
                         alt="@Video.Title"
                         loading="lazy" 
                         onerror="this.src='https://img.youtube.com/vi/@Video.YouTubeVideoId/hqdefault.jpg'" />
                    
                    <!-- Duration Badge -->
                    @if (!string.IsNullOrEmpty(Video.DurationDisplay))
                    {
                        <span class="badge bg-dark position-absolute bottom-0 end-0 m-2">
                            @Video.DurationDisplay
                        </span>
                    }

                    <!-- Watch Status Badge -->
                    @if (Video.WatchStatus != WatchStatus.NotWatched)
                    {
                        <span class="badge @GetWatchStatusBadgeClass() position-absolute top-0 start-0 m-2">
                            <i class="bi @GetWatchStatusIcon()"></i>
                        </span>
                    }
                </div>
            </div>
            
            <!-- Video Details -->
            <div class="col-md-9">
                <div class="card-body d-flex flex-column h-100">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <!-- Video Title -->
                        <h6 class="card-title mb-1 flex-grow-1 me-3">
                            <a href="@Video.YouTubeUrl" 
                               target="_blank" 
                               class="text-decoration-none">
                                @Video.Title
                                <i class="bi bi-box-arrow-up-right ms-1 small"></i>
                            </a>
                        </h6>
                        
                        <!-- Remove Button -->
                        <button type="button" 
                               class="btn btn-sm btn-outline-danger"
                               @onclick="() => ConfirmRemove()"
                               title="Remove from library">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    
                    <!-- Channel Info -->
                    <div class="text-muted small mb-2">
                        <a href="@Video.ChannelUrl" 
                           target="_blank" 
                           class="text-muted text-decoration-none">
                            <i class="bi bi-person-circle me-1"></i>
                            @Video.ChannelTitle
                        </a>
                        <span class="mx-2">•</span>
                        <span title="Published @Video.PublishedAt.ToString("MMM d, yyyy")">@Video.PublishedDisplay</span>
                        @if (Video.WatchStatus != WatchStatus.NotWatched)
                        {
                            <span class="mx-2">•</span>
                            <span class="@GetWatchStatusTextClass()">
                                <i class="bi @GetWatchStatusIcon() me-1"></i>
                                @GetWatchStatusText()
                            </span>
                        }
                    </div>
                    
                    <!-- Video Description -->
                    <p class="card-text text-muted small mb-3 flex-grow-1">
                        @Video.ShortDescription
                    </p>
                    
                    <!-- Video Stats and Actions -->
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="small text-muted">
                            <span title="@(Video.ViewCount?.ToString("N0")) views">
                                @Video.ViewCountDisplay views
                            </span>
                            @if (Video.LikeCount.HasValue && Video.LikeCount > 0)
                            {
                                <span class="mx-2">•</span>
                                <span title="@(Video.LikeCount?.ToString("N0")) likes">
                                    @Video.LikeCountDisplay likes
                                </span>
                            }
                            <span class="mx-2">•</span>
                            <span title="Added to library @Video.AddedToLibrary?.ToString("MMM d, yyyy h:mm tt")">
                                Added @Video.AddedToLibraryDisplay
                            </span>
                        </div>
                        
                        <div class="btn-group" role="group">
                            <button type="button" 
                                   class="btn @(Video.WatchStatus == WatchStatus.Watched ? "btn-success" : "btn-outline-success") btn-sm"
                                   @onclick="() => MarkAsWatched()"
                                   disabled="@IsUpdatingStatus"
                                   title="Mark as watched">
                                @if (IsUpdatingStatus && PendingStatus == WatchStatus.Watched)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle"></i>
                                }
                            </button>
                            <button type="button" 
                                   class="btn @(Video.WatchStatus == WatchStatus.Skipped ? "btn-secondary" : "btn-outline-secondary") btn-sm"
                                   @onclick="() => MarkAsSkipped()"
                                   disabled="@IsUpdatingStatus"
                                   title="Mark as skipped">
                                @if (IsUpdatingStatus && PendingStatus == WatchStatus.Skipped)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                }
                                else
                                {
                                    <i class="bi bi-skip-forward"></i>
                                }
                            </button>
                            <a href="@Video.YouTubeUrl" 
                               target="_blank" 
                               class="btn btn-primary btn-sm">
                                <i class="bi bi-play-circle me-1"></i>
                                Watch
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Confirmation Modal -->
@if (ShowConfirmDialog)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Remove Video</h5>
                    <button type="button" class="btn-close" @onclick="CancelRemove"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to remove <strong>"@Video.ShortTitle"</strong> from your library?</p>
                    <p class="text-muted small mb-0">This action cannot be undone, but you can always add the video back later.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelRemove">Cancel</button>
                    <button type="button" 
                           class="btn btn-danger" 
                           @onclick="RemoveVideo"
                           disabled="@IsRemoving">
                        @if (IsRemoving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Remove Video
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter, EditorRequired] public VideoDisplayModel Video { get; set; } = null!;
    [Parameter] public bool IsGridView { get; set; } = true;
    [Parameter] public EventCallback<VideoDisplayModel> OnVideoRemoved { get; set; }

    private bool ShowConfirmDialog = false;
    private bool IsRemoving = false;
    private bool IsUpdatingStatus = false;
    private WatchStatus? PendingStatus = null;
    private string? CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserIdAsync();
    }

    /// <summary>
    /// Gets the current authenticated user's ID using the same pattern as working components.
    /// </summary>
    private async Task GetCurrentUserIdAsync()
    {
        try
        {
            var authState = await AuthenticationStateTask!;
            CurrentUserId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
        }
        catch (Exception)
        {
            CurrentUserId = null;
        }
    }

    /// <summary>
    /// Gets the appropriate thumbnail URL for the video.
    /// Uses the video's stored thumbnail URL from the repository, which now uses proper YouTube thumbnails.
    /// </summary>
    private string GetThumbnailUrl()
    {
        // The repository now provides proper YouTube thumbnail URLs
        return Video.ThumbnailUrl ?? $"https://img.youtube.com/vi/{Video.YouTubeVideoId}/maxresdefault.jpg";
    }

    /// <summary>
    /// Gets the CSS class for watch status badge.
    /// </summary>
    private string GetWatchStatusBadgeClass()
    {
        return Video.WatchStatus switch
        {
            WatchStatus.Watched => "bg-success",
            WatchStatus.Skipped => "bg-secondary",
            _ => "bg-primary"
        };
    }

    /// <summary>
    /// Gets the icon for watch status.
    /// </summary>
    private string GetWatchStatusIcon()
    {
        return Video.WatchStatus switch
        {
            WatchStatus.Watched => "bi-check-circle-fill",
            WatchStatus.Skipped => "bi-skip-forward-fill",
            _ => "bi-circle"
        };
    }

    /// <summary>
    /// Gets the text for watch status.
    /// </summary>
    private string GetWatchStatusText()
    {
        return Video.WatchStatus switch
        {
            WatchStatus.Watched => "Watched",
            WatchStatus.Skipped => "Skipped",
            _ => "Not Watched"
        };
    }

    /// <summary>
    /// Gets the CSS class for watch status text.
    /// </summary>
    private string GetWatchStatusTextClass()
    {
        return Video.WatchStatus switch
        {
            WatchStatus.Watched => "text-success",
            WatchStatus.Skipped => "text-secondary",
            _ => "text-muted"
        };
    }

    /// <summary>
    /// Shows the confirmation dialog for removing the video.
    /// </summary>
    private void ConfirmRemove()
    {
        ShowConfirmDialog = true;
        StateHasChanged();
    }

    /// <summary>
    /// Cancels the remove operation and hides the dialog.
    /// </summary>
    private void CancelRemove()
    {
        ShowConfirmDialog = false;
        StateHasChanged();
    }

    /// <summary>
    /// Removes the video from the library after confirmation.
    /// </summary>
    private async Task RemoveVideo()
    {
        if (string.IsNullOrWhiteSpace(CurrentUserId))
        {
            await MessageCenter.ShowErrorAsync("Please log in to manage your library.");
            return;
        }

        IsRemoving = true;
        
        try
        {
            var success = await VideoService.RemoveVideoFromLibraryAsync(CurrentUserId, Video.Id);
            
            if (success)
            {
                ShowConfirmDialog = false;
                await OnVideoRemoved.InvokeAsync(Video);
            }
            else
            {
                await MessageCenter.ShowErrorAsync("Failed to remove video from library. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await MessageCenter.ShowErrorAsync($"Error removing video: {ex.Message}");
        }
        finally
        {
            IsRemoving = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Marks the video as watched.
    /// </summary>
    private async Task MarkAsWatched()
    {
        await UpdateWatchStatus(WatchStatus.Watched);
    }

    /// <summary>
    /// Marks the video as skipped.
    /// </summary>
    private async Task MarkAsSkipped()
    {
        await UpdateWatchStatus(WatchStatus.Skipped);
    }

    /// <summary>
    /// Updates the watch status for the video.
    /// </summary>
    private async Task UpdateWatchStatus(WatchStatus newStatus)
    {
        if (string.IsNullOrWhiteSpace(CurrentUserId) || IsUpdatingStatus)
            return;

        // If clicking the same status, toggle back to NotWatched
        if (Video.WatchStatus == newStatus)
        {
            newStatus = WatchStatus.NotWatched;
        }

        IsUpdatingStatus = true;
        PendingStatus = newStatus;
        
        try
        {
            var success = await VideoService.UpdateVideoWatchStatusAsync(CurrentUserId, Video.Id, newStatus);
            
            if (success)
            {
                Video.WatchStatus = newStatus;
                var statusText = GetWatchStatusText().ToLower();
                await MessageCenter.ShowSuccessAsync($"Marked video as {statusText}");
            }
            else
            {
                await MessageCenter.ShowErrorAsync("Failed to update watch status. Please try again.");
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await MessageCenter.ShowErrorAsync($"Failed to update watch status: {ex.Message}");
        }
        finally
        {
            IsUpdatingStatus = false;
            PendingStatus = null;
        }
    }
}

<style>
    .video-library-item {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        border: 1px solid var(--bs-border-color);
    }

    .video-library-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .video-thumbnail-grid {
        height: 180px;
        object-fit: cover;
        width: 100%;
    }

    .video-thumbnail-list {
        height: 120px;
        object-fit: cover;
        width: 100%;
    }

    .card-title a {
        color: inherit;
    }

    .card-title a:hover {
        color: var(--bs-primary) !important;
    }

    .remove-btn {
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    .video-library-item:hover .remove-btn {
        opacity: 1;
    }

    .badge {
        font-size: 0.7rem;
    }

    /* Button group improvements */
    .btn-group .btn {
        border-radius: 0;
    }

    .btn-group .btn:first-child {
        border-top-left-radius: var(--bs-border-radius-sm);
        border-bottom-left-radius: var(--bs-border-radius-sm);
    }

    .btn-group .btn:last-child {
        border-top-right-radius: var(--bs-border-radius-sm);
        border-bottom-right-radius: var(--bs-border-radius-sm);
    }

    /* Watch status styling */
    .text-success {
        color: var(--bs-success) !important;
    }

    .text-secondary {
        color: var(--bs-secondary) !important;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .video-thumbnail-grid {
            height: 150px;
        }
        
        .video-thumbnail-list {
            height: 100px;
        }

        .btn-group {
            flex-direction: column;
        }

        .btn-group .btn {
            border-radius: var(--bs-border-radius-sm) !important;
            margin-bottom: 0.25rem;
        }

        .btn-group .btn:last-child {
            margin-bottom: 0;
        }
    }

    /* Dark theme adjustments */
    [data-bs-theme="dark"] .video-library-item {
        border-color: var(--bs-border-color);
    }

    [data-bs-theme="dark"] .video-library-item:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    /* Loading state for buttons */
    .btn:disabled {
        cursor: not-allowed;
    }

    /* Thumbnail fallback styling */
    .video-thumbnail-grid,
    .video-thumbnail-list {
        background-color: var(--bs-light);
        background-image: url("data:image/svg+xml,%3csvg width='100' height='100' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100' height='100' fill='%23f8f9fa'/%3e%3ctext x='50' y='50' font-size='14' text-anchor='middle' dy='.3em' fill='%236c757d'%3eLoading...%3c/text%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: center;
        background-size: 60px 60px;
    }

    [data-bs-theme="dark"] .video-thumbnail-grid,
    [data-bs-theme="dark"] .video-thumbnail-list {
        background-color: var(--bs-dark);
    }
</style>
@inject IVideoService VideoService
@inject IMessageCenterService MessageCenter

@if (IsGridView)
{
    <!-- Grid View Card -->
    <div class="card video-library-item h-100">
        <div class="position-relative">
            <img src="@Video.ThumbnailUrl" 
                 class="card-img-top video-thumbnail-grid" 
                 alt="@Video.Title"
                 loading="lazy" />
            
            <!-- Duration Badge -->
            @if (!string.IsNullOrEmpty(Video.DurationDisplay))
            {
                <span class="badge bg-dark position-absolute bottom-0 end-0 m-2">
                    @Video.DurationDisplay
                </span>
            }
            
            <!-- Remove Button -->
            <button type="button" 
                   class="btn btn-sm btn-outline-danger position-absolute top-0 end-0 m-2 remove-btn"
                   @onclick="() => ConfirmRemove()"
                   title="Remove from library">
                <i class="bi bi-x"></i>
            </button>
        </div>
        
        <div class="card-body d-flex flex-column">
            <!-- Video Title -->
            <h6 class="card-title mb-2">
                <a href="@Video.YouTubeUrl" 
                   target="_blank" 
                   class="text-decoration-none">
                    @Video.Title
                    <i class="bi bi-box-arrow-up-right ms-1 small"></i>
                </a>
            </h6>
            
            <!-- Channel Info -->
            <div class="text-muted small mb-2">
                <a href="@Video.ChannelUrl" 
                   target="_blank" 
                   class="text-muted text-decoration-none">
                    <i class="bi bi-person-circle me-1"></i>
                    @Video.ChannelTitle
                </a>
            </div>
            
            <!-- Video Stats -->
            <div class="small text-muted mb-3 flex-grow-1">
                <div>@Video.ViewCountDisplay views</div>
                <div>Added @Video.AddedToLibraryDisplay</div>
            </div>
            
            <!-- Action Button -->
            <div class="mt-auto">
                <a href="@Video.YouTubeUrl" 
                   target="_blank" 
                   class="btn btn-primary btn-sm w-100">
                    <i class="bi bi-play-circle me-1"></i>
                    Watch Video
                </a>
            </div>
        </div>
    </div>
}
else
{
    <!-- List View Card -->
    <div class="card video-library-item">
        <div class="row g-0">
            <!-- Video Thumbnail -->
            <div class="col-md-3">
                <div class="position-relative">
                    <img src="@Video.ThumbnailUrl" 
                         class="img-fluid rounded-start video-thumbnail-list" 
                         alt="@Video.Title"
                         loading="lazy" />
                    
                    <!-- Duration Badge -->
                    @if (!string.IsNullOrEmpty(Video.DurationDisplay))
                    {
                        <span class="badge bg-dark position-absolute bottom-0 end-0 m-2">
                            @Video.DurationDisplay
                        </span>
                    }
                </div>
            </div>
            
            <!-- Video Details -->
            <div class="col-md-9">
                <div class="card-body d-flex flex-column h-100">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <!-- Video Title -->
                        <h6 class="card-title mb-1 flex-grow-1 me-3">
                            <a href="@Video.YouTubeUrl" 
                               target="_blank" 
                               class="text-decoration-none">
                                @Video.Title
                                <i class="bi bi-box-arrow-up-right ms-1 small"></i>
                            </a>
                        </h6>
                        
                        <!-- Remove Button -->
                        <button type="button" 
                               class="btn btn-sm btn-outline-danger"
                               @onclick="() => ConfirmRemove()"
                               title="Remove from library">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    
                    <!-- Channel Info -->
                    <div class="text-muted small mb-2">
                        <a href="@Video.ChannelUrl" 
                           target="_blank" 
                           class="text-muted text-decoration-none">
                            <i class="bi bi-person-circle me-1"></i>
                            @Video.ChannelTitle
                        </a>
                        <span class="mx-2">•</span>
                        <span>@Video.PublishedDisplay</span>
                    </div>
                    
                    <!-- Video Description -->
                    <p class="card-text text-muted small mb-3 flex-grow-1">
                        @Video.ShortDescription
                    </p>
                    
                    <!-- Video Stats and Actions -->
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="small text-muted">
                            <span>@Video.ViewCountDisplay views</span>
                            <span class="mx-2">•</span>
                            <span>Added @Video.AddedToLibraryDisplay</span>
                        </div>
                        
                        <a href="@Video.YouTubeUrl" 
                           target="_blank" 
                           class="btn btn-primary btn-sm">
                            <i class="bi bi-play-circle me-1"></i>
                            Watch
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Confirmation Modal -->
@if (ShowConfirmDialog)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Remove Video</h5>
                    <button type="button" class="btn-close" @onclick="CancelRemove"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to remove <strong>"@Video.ShortTitle"</strong> from your library?</p>
                    <p class="text-muted small mb-0">This action cannot be undone, but you can always add the video back later.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelRemove">Cancel</button>
                    <button type="button" 
                           class="btn btn-danger" 
                           @onclick="RemoveVideo"
                           disabled="@IsRemoving">
                        @if (IsRemoving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Remove Video
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter, EditorRequired] public VideoDisplayModel Video { get; set; } = null!;
    [Parameter] public bool IsGridView { get; set; } = true;
    [Parameter] public EventCallback<VideoDisplayModel> OnVideoRemoved { get; set; }

    private bool ShowConfirmDialog = false;
    private bool IsRemoving = false;
    private string? CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        // Get current user ID - this would come from authentication
        CurrentUserId = "temp-user-id"; // TODO: Get from AuthenticationStateProvider
        await Task.CompletedTask;
    }

    /// <summary>
    /// Shows the confirmation dialog for removing the video.
    /// </summary>
    private void ConfirmRemove()
    {
        ShowConfirmDialog = true;
        StateHasChanged();
    }

    /// <summary>
    /// Cancels the remove operation and hides the dialog.
    /// </summary>
    private void CancelRemove()
    {
        ShowConfirmDialog = false;
        StateHasChanged();
    }

    /// <summary>
    /// Removes the video from the library after confirmation.
    /// </summary>
    private async Task RemoveVideo()
    {
        if (string.IsNullOrWhiteSpace(CurrentUserId))
        {
            await MessageCenter.ShowErrorAsync("Please log in to manage your library.");
            return;
        }

        IsRemoving = true;
        
        try
        {
            var success = await VideoService.RemoveVideoFromLibraryAsync(CurrentUserId, Video.Id);
            
            if (success)
            {
                ShowConfirmDialog = false;
                await OnVideoRemoved.InvokeAsync(Video);
            }
            else
            {
                await MessageCenter.ShowErrorAsync("Failed to remove video from library. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await MessageCenter.ShowErrorAsync($"Error removing video: {ex.Message}");
        }
        finally
        {
            IsRemoving = false;
            StateHasChanged();
        }
    }
}

<style>
    .video-library-item {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        border: 1px solid var(--bs-border-color);
    }

    .video-library-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .video-thumbnail-grid {
        height: 180px;
        object-fit: cover;
        width: 100%;
    }

    .video-thumbnail-list {
        height: 120px;
        object-fit: cover;
        width: 100%;
    }

    .card-title a {
        color: inherit;
    }

    .card-title a:hover {
        color: var(--bs-primary) !important;
    }

    .remove-btn {
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    .video-library-item:hover .remove-btn {
        opacity: 1;
    }

    .badge {
        font-size: 0.7rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .video-thumbnail-grid {
            height: 150px;
        }
        
        .video-thumbnail-list {
            height: 100px;
        }
    }

    /* Dark theme adjustments */
    [data-bs-theme="dark"] .video-library-item {
        border-color: var(--bs-border-color);
    }

    [data-bs-theme="dark"] .video-library-item:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
</style>
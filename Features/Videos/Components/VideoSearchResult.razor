@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Features.Videos.Models
@using TargetBrowse.Features.Videos.Services
@using TargetBrowse.Services
@inject IVideoService VideoService
@inject IMessageCenterService MessageCenter

<div class="card video-search-result h-100">
    <!-- Video Thumbnail Container -->
    <div class="position-relative video-thumbnail-container">
        <img src="@Video.ThumbnailUrl" 
             class="card-img-top video-thumbnail" 
             alt="@Video.Title"
             loading="lazy" />
        
        <!-- Duration Badge -->
        @if (!string.IsNullOrEmpty(Video.DurationDisplay))
        {
            <span class="badge bg-dark position-absolute duration-badge">
                @Video.DurationDisplay
            </span>
        }

        <!-- Library Status Badge -->
        @if (Video.IsInLibrary)
        {
            <span class="badge bg-success position-absolute library-badge">
                <i class="bi bi-check-circle me-1"></i>
                In Library
            </span>
        }
    </div>

    <!-- Video Details -->
    <div class="card-body d-flex flex-column p-3">
        <!-- Video Title -->
        <h6 class="card-title video-title mb-2">
            <a href="@Video.YouTubeUrl" 
               target="_blank" 
               class="text-decoration-none title-link"
               title="@Video.Title">
                @Video.Title
            </a>
        </h6>
        
        <!-- Channel Info -->
        <div class="video-channel mb-2">
            <a href="@Video.ChannelUrl" 
               target="_blank" 
               class="text-muted text-decoration-none channel-link">
                <i class="bi bi-person-circle me-1"></i>
                @Video.ChannelTitle
            </a>
        </div>

        <!-- Video Metadata -->
        <div class="video-metadata mb-2">
            <small class="text-muted">
                @if (!string.IsNullOrEmpty(Video.ViewCountDisplay))
                {
                    <span>@Video.ViewCountDisplay views</span>
                    <span class="mx-1">â€¢</span>
                }
                <span>@Video.PublishedDisplay</span>
            </small>
        </div>

        <!-- Enhanced Metadata Display (Duration, Likes if available) -->
        @if (Video.HasDetailedInfo)
        {
            <div class="video-stats mb-2">
                <small class="text-muted d-flex flex-wrap gap-2">
                    @if (!string.IsNullOrEmpty(Video.LikeCountDisplay))
                    {
                        <span>
                            <i class="bi bi-hand-thumbs-up me-1"></i>
                            @Video.LikeCountDisplay
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(Video.CommentCountDisplay))
                    {
                        <span>
                            <i class="bi bi-chat me-1"></i>
                            @Video.CommentCountDisplay
                        </span>
                    }
                </small>
            </div>
        }

        <!-- Video Description -->
        @if (!string.IsNullOrEmpty(Video.ShortDescription) && Video.ShortDescription != "No description available")
        {
            <p class="video-description text-muted small mb-3 flex-grow-1">
                @Video.ShortDescription
            </p>
        }

        <!-- Action Buttons -->
        <div class="mt-auto">
            @if (!Video.IsInLibrary)
            {
                <button type="button" 
                       class="btn btn-primary btn-sm w-100 mb-2" 
                       @onclick="AddToLibrary"
                       disabled="@IsAddingToLibrary">
                    @if (IsAddingToLibrary)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    else
                    {
                        <i class="bi bi-plus-circle me-1"></i>
                    }
                    Save to Library
                </button>
            }
            else
            {
                <button type="button" 
                       class="btn btn-success btn-sm w-100 mb-2" 
                       disabled>
                    <i class="bi bi-check-circle me-1"></i>
                    In Library
                </button>
            }
            
            <a href="@Video.YouTubeUrl" 
               target="_blank" 
               class="btn btn-outline-secondary btn-sm w-100">
                <i class="bi bi-play-circle me-1"></i>
                Watch on YouTube
                <i class="bi bi-box-arrow-up-right ms-1 small"></i>
            </a>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter, EditorRequired] public VideoDisplayModel Video { get; set; } = null!;
    [Parameter] public EventCallback<VideoDisplayModel> OnVideoAdded { get; set; }

    private bool IsAddingToLibrary = false;

    /// <summary>
    /// Adds the video to the user's library with full metadata.
    /// </summary>
    private async Task AddToLibrary()
    {
        if (IsAddingToLibrary)
            return;

        try
        {
            IsAddingToLibrary = true;
            StateHasChanged();

            // Get current user ID
            var authState = await AuthenticationStateTask!;
            var userId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(userId))
            {
                await MessageCenter.ShowErrorAsync("Please log in to add videos to your library.");
                return;
            }

            if (Video.IsInLibrary)
            {
                return; // Already in library
            }

            // Create the add model
            var addModel = new AddVideoModel
            {
                VideoUrl = Video.YouTubeUrl,
                Notes = $"Added from search on {DateTime.Now:yyyy-MM-dd}"
            };

            // Add to library - this will now get full video details including duration, views, likes
            var success = await VideoService.AddVideoToLibraryAsync(userId, addModel);
            
            if (success)
            {
                Video.IsInLibrary = true;
                Video.AddedToLibrary = DateTime.UtcNow;
                
                await MessageCenter.ShowSuccessAsync($"Added '{Video.ShortTitle}' to your library with full details!");
                await OnVideoAdded.InvokeAsync(Video);
            }
            else
            {
                await MessageCenter.ShowErrorAsync("Failed to add video to library. It may already exist or there was a network error.");
            }
        }
        catch (Exception ex)
        {
            await MessageCenter.ShowErrorAsync($"Error adding video to library: {ex.Message}");
        }
        finally
        {
            IsAddingToLibrary = false;
            StateHasChanged();
        }
    }
}

<style>
    .video-search-result {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        border: 1px solid var(--bs-border-color);
        height: 100%;
    }

    .video-search-result:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
    }

    .video-thumbnail-container {
        position: relative;
        overflow: hidden;
    }

    .video-thumbnail {
        width: 100%;
        height: 200px;
        object-fit: cover;
        transition: transform 0.2s ease;
    }

    .video-search-result:hover .video-thumbnail {
        transform: scale(1.02);
    }

    .duration-badge {
        bottom: 8px;
        right: 8px;
        font-size: 0.7rem;
        padding: 2px 6px;
        border-radius: 3px;
    }

    .library-badge {
        top: 8px;
        left: 8px;
        font-size: 0.7rem;
        padding: 2px 6px;
        border-radius: 3px;
    }

    .video-title {
        font-size: 0.9rem;
        line-height: 1.3;
        font-weight: 600;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        min-height: 2.4rem;
    }

    .title-link {
        color: inherit;
    }

    .title-link:hover {
        color: var(--bs-primary) !important;
    }

    .video-channel {
        font-size: 0.8rem;
    }

    .channel-link:hover {
        color: var(--bs-primary) !important;
    }

    .video-metadata, .video-stats {
        font-size: 0.75rem;
    }

    .video-description {
        font-size: 0.75rem;
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        max-height: 2.1rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .video-thumbnail {
            height: 180px;
        }
        
        .video-title {
            font-size: 0.85rem;
        }
        
        .video-channel {
            font-size: 0.75rem;
        }
    }

    @@media (max-width: 576px) {
        .video-thumbnail {
            height: 160px;
        }
    }

    /* Dark theme adjustments */
    [data-bs-theme="dark"] .video-search-result {
        border-color: var(--bs-border-color);
        background-color: var(--bs-dark);
    }

    [data-bs-theme="dark"] .video-search-result:hover {
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
    }

    [data-bs-theme="dark"] .title-link {
        color: var(--bs-light);
    }

    [data-bs-theme="dark"] .title-link:hover {
        color: var(--bs-primary) !important;
    }
</style>
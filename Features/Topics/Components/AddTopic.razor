@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Features.Topics.Models
@using TargetBrowse.Features.Topics.Services
@inject ITopicService TopicService
@attribute [Authorize]

@rendermode InteractiveServer

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="bi bi-plus-circle me-2"></i>
            Add New Topic
        </h5>
    </div>
    <div class="card-body">
        <EditForm Model="@TopicModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            
            <div class="mb-3">
                <label for="topicName" class="form-label">Topic Name</label>
                <InputText @bind-Value="TopicModel.Name" 
                          class="form-control" 
                          id="topicName" 
                          placeholder="Enter topic name (e.g., Machine Learning, Web Development)" 
                          disabled="@IsSubmitting" />
                <ValidationMessage For="@(() => TopicModel.Name)" class="text-danger" />
                <div class="form-text">
                    Topics help us find relevant YouTube content for you. Be specific for better suggestions.
                </div>
            </div>

            <div class="d-flex justify-content-between align-items-center">
                <div class="text-muted small">
                    @if (CurrentTopicCount >= 0)
                    {
                        <span>@CurrentTopicCount / 10 topics used</span>
                    }
                </div>
                <button type="submit" 
                        class="btn btn-primary" 
                        disabled="@IsSubmitting">
                    @if (IsSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    Add Topic
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private AddTopicModel TopicModel { get; set; } = new();
    private bool IsSubmitting { get; set; } = false;
    private int CurrentTopicCount { get; set; } = -1;

    protected override async Task OnInitializedAsync()
    {
        await LoadTopicCount();
    }

    /// <summary>
    /// Handles form submission for adding a new topic.
    /// Validates user authentication and processes the request.
    /// </summary>
    private async Task HandleValidSubmit()
    {
        if (IsSubmitting) return;

        try
        {
            IsSubmitting = true;
            StateHasChanged();

            // Get current user
            var authState = await AuthenticationStateTask!;
            var userId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(userId))
            {
                // This shouldn't happen with [Authorize] attribute, but safety first
                return;
            }

            // Attempt to add the topic
            var success = await TopicService.AddTopicAsync(userId, TopicModel.Name);

            if (success)
            {
                // Reset form and refresh topic count
                TopicModel.Reset();
                await LoadTopicCount();
            }
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Loads the current topic count for the user to display progress.
    /// </summary>
    private async Task LoadTopicCount()
    {
        try
        {
            var authState = await AuthenticationStateTask!;
            var userId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (!string.IsNullOrEmpty(userId))
            {
                CurrentTopicCount = await TopicService.GetTopicCountAsync(userId);
                StateHasChanged();
            }
        }
        catch
        {
            // If we can't load the count, it's not critical - just hide the counter
            CurrentTopicCount = -1;
        }
    }
}
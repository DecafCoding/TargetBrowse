@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Features.Topics.Models
@using TargetBrowse.Features.Topics.Services
@inject ITopicService TopicService
@attribute [Authorize]

@rendermode InteractiveServer

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="bi bi-list-ul me-2"></i>
            Your Topics
        </h5>
    </div>
    <div class="card-body">
        @if (IsLoading)
        {
            <!-- Loading State -->
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading topics...</span>
                </div>
                <p class="text-muted mt-2 mb-0">Loading your topics...</p>
            </div>
        }
        else if (!Topics.Any())
        {
            <!-- Empty State -->
            <div class="text-center py-4">
                <i class="bi bi-lightbulb text-muted" style="font-size: 3rem;"></i>
                <h6 class="mt-3 text-muted">No topics yet</h6>
                <p class="text-muted small mb-0">
                    Add your first topic above to start getting personalized YouTube content suggestions.
                </p>
            </div>
        }
        else
        {
            <!-- Topic List -->
            <div class="list-group list-group-flush">
                @foreach (var topic in Topics)
                {
                    <div class="list-group-item d-flex justify-content-between align-items-start px-0 py-3">
                        <div class="me-auto">
                            <h6 class="mb-0">@topic.Name</h6>
                            <small class="text-muted">Added @topic.CreatedAtDisplay</small>
                        </div>

                        <!-- Delete Action -->
                        <div class="ms-3">
                            <button type="button"
                                    class="btn btn-outline-danger btn-sm"
                                    @onclick="() => ShowDeleteConfirmation(topic)"
                                    disabled="@IsDeleting"
                                    title="Delete topic">
                                @if (IsDeleting && _topicToDelete?.Id == topic.Id)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <i class="bi bi-trash"></i>
                                }
                            </button>
                        </div>
                    </div>
                }
            </div>

            <!-- Topic Limit Information -->
            <div class="mt-3 pt-3 border-top">
                <div class="d-flex justify-content-between align-items-center">
                    <small class="text-muted">
                        @Topics.Count of 10 topics used
                    </small>
                    @if (Topics.Count >= 8)
                    {
                        <small class="text-warning">
                            <i class="bi bi-exclamation-triangle me-1"></i>
                            Approaching limit
                        </small>
                    }
                </div>

                <!-- Progress Bar -->
                <div class="progress mt-2" style="height: 4px;">
                    <div class="progress-bar @GetProgressBarClass()"
                         role="progressbar"
                         style="width: @(Topics.Count * 10)%"
                         aria-valuenow="@Topics.Count"
                         aria-valuemin="0"
                         aria-valuemax="10">
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (_showDeleteModal && _topicToDelete != null)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" aria-labelledby="deleteModalTitle" aria-hidden="false">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalTitle">
                        <i class="bi bi-exclamation-triangle text-warning me-2"></i>
                        Confirm Delete
                    </h5>
                    <button type="button"
                            class="btn-close"
                            @onclick="HideDeleteConfirmation"
                            disabled="@IsDeleting"
                            aria-label="Close">
                    </button>
                </div>
                <div class="modal-body">
                    <p class="mb-2">Are you sure you want to delete the topic:</p>
                    <p class="fw-bold text-danger mb-3">"@_topicToDelete.Name"</p>
                    <p class="text-muted small mb-0">
                        <i class="bi bi-info-circle me-1"></i>
                        This action cannot be undone. Any suggestions based on this topic will no longer be generated.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button"
                            class="btn btn-secondary"
                            @onclick="HideDeleteConfirmation"
                            disabled="@IsDeleting">
                        Cancel
                    </button>
                    <button type="button"
                            class="btn btn-danger"
                            @onclick="ConfirmDelete"
                            disabled="@IsDeleting">
                        @if (IsDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Delete Topic
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Backdrop -->
    <div class="modal-backdrop show" @onclick="HideDeleteConfirmation"></div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter]
    public EventCallback OnTopicsChanged { get; set; }

    private List<TopicDisplayModel> Topics { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private bool IsDeleting { get; set; } = false;
    private bool _showDeleteModal { get; set; } = false;
    private TopicDisplayModel? _topicToDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTopicsAsync();
    }

    /// <summary>
    /// Public method to refresh the topic list.
    /// Called by parent component when topics are added/modified.
    /// </summary>
    public async Task RefreshAsync()
    {
        await LoadTopicsAsync();
    }

    /// <summary>
    /// Shows the delete confirmation modal for the specified topic.
    /// </summary>
    private void ShowDeleteConfirmation(TopicDisplayModel topic)
    {
        if (IsDeleting) return;

        _topicToDelete = topic;
        _showDeleteModal = true;
        StateHasChanged();
    }

    /// <summary>
    /// Hides the delete confirmation modal and resets state.
    /// </summary>
    private void HideDeleteConfirmation()
    {
        if (IsDeleting) return;

        _showDeleteModal = false;
        _topicToDelete = null;
        StateHasChanged();
    }

    /// <summary>
    /// Confirms the deletion and calls the service to delete the topic.
    /// </summary>
    private async Task ConfirmDelete()
    {
        if (IsDeleting || _topicToDelete == null) return;

        try
        {
            IsDeleting = true;
            StateHasChanged();

            var authState = await AuthenticationStateTask!;
            var userId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (!string.IsNullOrEmpty(userId))
            {
                var success = await TopicService.DeleteTopicAsync(userId, _topicToDelete.Id);

                if (success)
                {
                    // Refresh the topic list to reflect the deletion
                    await LoadTopicsAsync();

                    // Notify parent component of topic changes
                    if (OnTopicsChanged.HasDelegate)
                    {
                        await OnTopicsChanged.InvokeAsync();
                    }
                }
            }
        }
        finally
        {
            IsDeleting = false;
            HideDeleteConfirmation();
        }
    }

    /// <summary>
    /// Loads topics for the current user from the service.
    /// </summary>
    private async Task LoadTopicsAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            var authState = await AuthenticationStateTask!;
            var userId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (!string.IsNullOrEmpty(userId))
            {
                Topics = await TopicService.GetUserTopicsAsync(userId);

                // Notify parent component of topic changes (for count updates)
                if (OnTopicsChanged.HasDelegate)
                {
                    await OnTopicsChanged.InvokeAsync();
                }
            }
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Gets the appropriate CSS class for the progress bar based on topic count.
    /// </summary>
    private string GetProgressBarClass()
    {
        return Topics.Count switch
        {
            >= 9 => "bg-danger",
            >= 7 => "bg-warning",
            >= 5 => "bg-info",
            _ => "bg-success"
        };
    }
}

<style>
    /* Modal styling to ensure proper display */
    .modal.show {
        display: block !important;
    }

    .modal-backdrop.show {
        opacity: 0.5;
    }

    /* Delete button hover effect */
    .btn-outline-danger:hover {
        transform: translateY(-1px);
        transition: transform 0.2s ease;
    }

    /* Topic item hover effect */
    .list-group-item:hover {
        background-color: var(--bs-light);
    }

    /* Loading state for delete button */
    .btn-outline-danger:disabled {
        opacity: 0.6;
    }
</style>
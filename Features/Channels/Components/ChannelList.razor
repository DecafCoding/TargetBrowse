@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Features.Channels.Models
@using TargetBrowse.Features.Channels.Services
@using TargetBrowse.Features.Channels.Components
@inject IChannelService ChannelService
@inject IChannelRatingService ChannelRatingService
@attribute [Authorize]

@rendermode InteractiveServer

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="bi bi-list-ul me-2"></i>
            Tracked Channels
        </h5>
    </div>
    <div class="card-body">
        @if (IsLoading)
        {
            <!-- Loading State -->
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading tracked channels...</span>
                </div>
                <p class="text-muted mt-2 mb-0">Loading your tracked channels...</p>
            </div>
        }
        else if (!TrackedChannels.Any())
        {
            <!-- Empty State -->
            <div class="text-center py-4">
                <i class="bi bi-youtube text-muted" style="font-size: 3rem;"></i>
                <h6 class="mt-3 text-muted">No channels tracked yet</h6>
                <p class="text-muted small mb-0">
                    Search for YouTube channels above to start tracking your favorites and get personalized content suggestions.
                </p>
            </div>
        }
        else
        {
            <!-- Channel Table -->
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th scope="col" class="border-0">Channel</th>
                            <th scope="col" class="border-0">Subs</th>
                            <th scope="col" class="border-0">Videos</th>
                            <th scope="col" class="border-0">Age</th>
                            <th scope="col" class="border-0 text-center">Rating</th>
                            <th scope="col" class="border-0 text-center">Details</th>
                            <th scope="col" class="border-0 text-center" style="width: 80px;">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var channel in TrackedChannels)
                        {
                            <tr>
                                <!-- Channel Info -->
                                <td>
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(channel.ThumbnailUrl))
                                        {
                                            <img src="@channel.ThumbnailUrl"
                                                 alt="@channel.Name thumbnail"
                                                 class="rounded me-3"
                                                 style="width: 40px; height: 40px; object-fit: cover;" />
                                        }
                                        else
                                        {
                                            <div class="bg-secondary rounded me-3 d-flex align-items-center justify-content-center"
                                                 style="width: 40px; height: 40px;">
                                                <i class="bi bi-person-circle text-white"></i>
                                            </div>
                                        }
                                        <div>
                                            <div class="fw-medium">@channel.Name</div>
                                            <div class="text-muted small">@channel.ShortDescription</div>
                                        </div>
                                    </div>
                                </td>

                                <!-- Subscriber Count -->
                                <td class="text-muted">
                                    @channel.SubscriberCountDisplay
                                </td>

                                <!-- Video Count -->
                                <td class="text-muted">
                                    @channel.VideoCountDisplay
                                </td>

                                <!-- Tracked Since -->
                                <td class="text-muted">
                                    @channel.TrackedSinceDisplay
                                </td>

                                <!-- Rating -->
                                <td class="text-center">
                                    <ChannelRatingDisplay Rating="@channel.UserRating"
                                                        ShowDetailsButton="false"
                                                        ShowEditButton="true"
                                                        OnRateClick="@(() => ShowRatingModal(channel))"
                                                        OnEditClick="@(() => ShowEditRatingModal(channel))" />
                                </td>

                                <!-- Links -->
                                <td class="text-center">
                                    <a href="@channel.YouTubeUrl"
                                       target="_blank"
                                       class="btn btn-outline-secondary btn-sm"
                                       title="View on YouTube">
                                        <i class="bi bi-youtube"></i>
                                    </a>
                                </td>

                                <!-- Remove Action -->
                                <td class="text-center">
                                    <button type="button"
                                            class="btn btn-outline-danger btn-sm"
                                            @onclick="() => ShowRemoveConfirmation(channel)"
                                            disabled="@IsRemoving"
                                            title="Remove from tracking">
                                        @if (IsRemoving && _channelToRemove?.Id == channel.Id)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-trash"></i>
                                        }
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (TrackedChannels.Any())
        {
            <!-- Channel Limit Information -->
            <div class="mt-3 pt-3 border-top">
                <div class="d-flex justify-content-between align-items-center">
                    <small class="text-muted">
                        @TrackedChannels.Count of 50 channels tracked
                    </small>
                    @if (TrackedChannels.Count >= 45)
                    {
                        <small class="text-warning">
                            <i class="bi bi-exclamation-triangle me-1"></i>
                            Approaching limit
                        </small>
                    }
                </div>

                <!-- Progress Bar -->
                <div class="progress mt-2" style="height: 4px;">
                    <div class="progress-bar @GetProgressBarClass()"
                         role="progressbar"
                         style="width: @(TrackedChannels.Count * 2)%"
                         aria-valuenow="@TrackedChannels.Count"
                         aria-valuemin="0"
                         aria-valuemax="50">
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Remove Confirmation Modal -->
@if (_showRemoveModal && _channelToRemove != null)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" aria-labelledby="removeModalTitle" aria-hidden="false">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="removeModalTitle">
                        <i class="bi bi-exclamation-triangle text-warning me-2"></i>
                        Confirm Remove
                    </h5>
                    <button type="button"
                            class="btn-close"
                            @onclick="HideRemoveConfirmation"
                            disabled="@IsRemoving"
                            aria-label="Close">
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex align-items-center mb-3">
                        @if (!string.IsNullOrEmpty(_channelToRemove.ThumbnailUrl))
                        {
                            <img src="@_channelToRemove.ThumbnailUrl"
                                 alt="@_channelToRemove.Name thumbnail"
                                 class="rounded me-3"
                                 style="width: 50px; height: 50px; object-fit: cover;" />
                        }
                        <div>
                            <h6 class="mb-1">@_channelToRemove.Name</h6>
                            <small class="text-muted">@_channelToRemove.SubscriberCountDisplay subscribers</small>
                        </div>
                    </div>
                    <p class="mb-2">Are you sure you want to remove this channel from your tracking list?</p>
                    <p class="text-muted small mb-0">
                        <i class="bi bi-info-circle me-1"></i>
                        You'll no longer receive suggestions from this channel, but you can add it back anytime.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button"
                            class="btn btn-secondary"
                            @onclick="HideRemoveConfirmation"
                            disabled="@IsRemoving">
                        Cancel
                    </button>
                    <button type="button"
                            class="btn btn-danger"
                            @onclick="ConfirmRemove"
                            disabled="@IsRemoving">
                        @if (IsRemoving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Remove Channel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Backdrop -->
    <div class="modal-backdrop show" @onclick="HideRemoveConfirmation"></div>
}

<!-- Channel Rating Modal -->
<ChannelRatingModal @ref="RatingModal"
                   OnRatingCreated="HandleRatingCreated"
                   OnRatingUpdated="HandleRatingUpdated"
                   OnRatingDeleted="HandleRatingDeleted" />

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter]
    public EventCallback OnChannelsChanged { get; set; }

    private List<ChannelDisplayModel> TrackedChannels { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private bool IsRemoving { get; set; } = false;
    private bool _showRemoveModal { get; set; } = false;
    private ChannelDisplayModel? _channelToRemove { get; set; }
    private ChannelRatingModal? RatingModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTrackedChannelsAsync();
    }

    /// <summary>
    /// Public method to refresh the tracked channels list.
    /// Called by parent component when channels are added/modified.
    /// </summary>
    public async Task RefreshAsync()
    {
        await LoadTrackedChannelsAsync();
    }

    /// <summary>
    /// Shows the rating modal for creating a new rating.
    /// </summary>
    private void ShowRatingModal(ChannelDisplayModel channel)
    {
        RatingModal?.ShowForNewRating(channel);
    }

    /// <summary>
    /// Shows the rating modal for editing an existing rating.
    /// </summary>
    private void ShowEditRatingModal(ChannelDisplayModel channel)
    {
        if (channel.UserRating != null)
        {
            RatingModal?.ShowForEditRating(channel, channel.UserRating);
        }
    }

    /// <summary>
    /// Handles when a new rating is created.
    /// </summary>
    private async Task HandleRatingCreated(ChannelRatingModel newRating)
    {
        await LoadTrackedChannelsAsync(); // Refresh to show the new rating
    }

    /// <summary>
    /// Handles when a rating is updated.
    /// </summary>
    private async Task HandleRatingUpdated(ChannelRatingModel updatedRating)
    {
        await LoadTrackedChannelsAsync(); // Refresh to show the updated rating
    }

    /// <summary>
    /// Handles when a rating is deleted.
    /// </summary>
    private async Task HandleRatingDeleted(Guid deletedRatingId)
    {
        await LoadTrackedChannelsAsync(); // Refresh to remove the rating display
    }

    /// <summary>
    /// Shows the remove confirmation modal for the specified channel.
    /// </summary>
    private void ShowRemoveConfirmation(ChannelDisplayModel channel)
    {
        if (IsRemoving) return;

        _channelToRemove = channel;
        _showRemoveModal = true;
        StateHasChanged();
    }

    /// <summary>
    /// Hides the remove confirmation modal and resets state.
    /// </summary>
    private void HideRemoveConfirmation()
    {
        if (IsRemoving) return;

        _showRemoveModal = false;
        _channelToRemove = null;
        StateHasChanged();
    }

    /// <summary>
    /// Confirms the removal and calls the service to remove the channel.
    /// </summary>
    private async Task ConfirmRemove()
    {
        if (IsRemoving || _channelToRemove == null) return;

        try
        {
            IsRemoving = true;
            StateHasChanged();

            // Get current user
            var authState = await AuthenticationStateTask!;
            var userId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (!string.IsNullOrEmpty(userId))
            {
                var success = await ChannelService.RemoveChannelFromTrackingAsync(userId, _channelToRemove.Id);

                if (success)
                {
                    // Refresh the channels list to reflect the removal
                    await LoadTrackedChannelsAsync();

                    // Notify parent component of channel changes
                    if (OnChannelsChanged.HasDelegate)
                    {
                        await OnChannelsChanged.InvokeAsync();
                    }
                }
            }
        }
        finally
        {
            IsRemoving = false;
            HideRemoveConfirmation();
        }
    }

    /// <summary>
    /// Loads tracked channels with their ratings for the current user.
    /// </summary>
    private async Task LoadTrackedChannelsAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            var authState = await AuthenticationStateTask!;
            var userId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (!string.IsNullOrEmpty(userId))
            {
                // Get tracked channels
                TrackedChannels = await ChannelService.GetTrackedChannelsAsync(userId);

                // Load ratings for each channel
                foreach (var channel in TrackedChannels)
                {
                    channel.UserRating = await ChannelRatingService.GetUserRatingAsync(userId, channel.Id);
                }

                // Notify parent component of channel changes (for count updates)
                if (OnChannelsChanged.HasDelegate)
                {
                    await OnChannelsChanged.InvokeAsync();
                }
            }
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Gets the appropriate CSS class for the progress bar based on channel count.
    /// </summary>
    private string GetProgressBarClass()
    {
        return TrackedChannels.Count switch
        {
            >= 45 => "bg-danger",
            >= 35 => "bg-warning",
            >= 25 => "bg-info",
            _ => "bg-success"
        };
    }
}

<style>
    /* Modal styling to ensure proper display */
    .modal.show {
        display: block !important;
    }

    .modal-backdrop.show {
        opacity: 0.5;
    }

    /* Table styling improvements */
    .table > tbody > tr > td {
        vertical-align: middle;
        border-top: 1px solid var(--bs-border-color);
    }

    .table > thead > tr > th {
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }

    /* Channel thumbnail styling */
    .table img, .modal img {
        border: 1px solid var(--bs-border-color);
    }

    /* Remove button hover effect */
    .btn-outline-danger:hover {
        transform: translateY(-1px);
        transition: transform 0.2s ease;
    }

    /* Table row hover effect */
    .table-hover tbody tr:hover {
        background-color: var(--bs-light);
    }

    /* Loading state for remove button */
    .btn-outline-danger:disabled {
        opacity: 0.6;
    }

    /* Rating column alignment */
    .table td:nth-child(5) {
        min-width: 120px;
    }

    /* Responsive table improvements */
    @@media (max-width: 768px) {
        .table-responsive {
            font-size: 0.9rem;
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.775rem;
        }

        /* Stack channel info on mobile */
        .table .d-flex {
            flex-direction: column;
            align-items: flex-start !important;
        }

        .table .d-flex img,
        .table .d-flex > div:first-child {
            margin-bottom: 0.5rem;
        }

        /* Hide some columns on mobile */
        .table th:nth-child(3),
        .table td:nth-child(3),
        .table th:nth-child(4),
        .table td:nth-child(4) {
            display: none;
        }
    }

    /* Rating display improvements */
    .table td:nth-child(5) .d-flex {
        justify-content: center;
        align-items: center;
        gap: 0.25rem;
    }

    /* Button group spacing */
    .btn-group-sm > .btn {
        margin: 0 2px;
    }

    /* Dark mode adjustments */
    [data-bs-theme="dark"] .table-hover tbody tr:hover {
        background-color: var(--bs-gray-800);
    }

    [data-bs-theme="dark"] .table > thead > tr > th {
        background-color: var(--bs-gray-800);
        color: var(--bs-gray-200);
    }
</style>
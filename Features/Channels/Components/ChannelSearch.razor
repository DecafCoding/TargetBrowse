@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Features.Channels.Models
@using TargetBrowse.Features.Channels.Services
@inject IChannelService ChannelService
@attribute [Authorize]

@rendermode InteractiveServer

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="bi bi-search me-2"></i>
            Search YouTube Channels
        </h5>
    </div>
    <div class="card-body">
        <!-- Search Form -->
        <EditForm Model="@SearchModel" OnValidSubmit="@HandleSearch">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="searchQuery" class="form-label">Channel Name or YouTube URL</label>
                <div class="input-group">
                    <InputText @bind-Value="SearchModel.SearchQuery"
                               class="form-control"
                               id="searchQuery"
                               placeholder="Enter channel name or paste YouTube channel URL"
                               disabled="@IsSearching" />
                    <button type="submit"
                            class="btn btn-primary"
                            disabled="@IsSearching">
                        @if (IsSearching)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="bi bi-search me-2"></i>
                        }
                        Search
                    </button>
                </div>
                <ValidationMessage For="@(() => SearchModel.SearchQuery)" class="text-danger" />
                <div class="form-text">
                    <i class="bi bi-info-circle me-1"></i>
                    You can search by channel name or paste a YouTube channel URL
                </div>
            </div>
        </EditForm>

        <!-- Search Results -->
        @if (HasSearched)
        {
            @if (IsSearching)
            {
                <!-- Loading State -->
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Searching channels...</span>
                    </div>
                    <p class="text-muted mt-2 mb-0">Searching YouTube for channels...</p>
                </div>
            }
            else if (!SearchResults.Any())
            {
                <!-- No Results State -->
                <div class="alert alert-info d-flex align-items-center" role="alert">
                    <i class="bi bi-info-circle me-2"></i>
                    <div>
                        No channels found for "<strong>@LastSearchQuery</strong>".
                        Try searching with different keywords or check the YouTube URL.
                    </div>
                </div>
            }
            else
            {
                <!-- Search Results -->
                <div class="border-top pt-3">
                    <h6 class="text-muted mb-3">
                        Found @SearchResults.Count channel@(SearchResults.Count == 1 ? "" : "s") for "@LastSearchQuery"
                    </h6>

                    <div class="row g-3">
                        @foreach (var channel in SearchResults)
                        {
                            <div class="col-12">
                                <div class="card h-100 @(channel.IsTracked ? "border-success" : "")">
                                    <div class="card-body">
                                        <div class="row align-items-center">
                                            <!-- Channel Thumbnail -->
                                            <div class="col-auto">
                                                @if (!string.IsNullOrEmpty(channel.ThumbnailUrl))
                                                {
                                                    <img src="@channel.ThumbnailUrl"
                                                         alt="@channel.Name thumbnail"
                                                         class="rounded"
                                                         style="width: 60px; height: 60px; object-fit: cover;" />
                                                }
                                                else
                                                {
                                                    <div class="bg-secondary rounded d-flex align-items-center justify-content-center"
                                                         style="width: 60px; height: 60px;">
                                                        <i class="bi bi-person-circle text-white" style="font-size: 1.5rem;"></i>
                                                    </div>
                                                }
                                            </div>

                                            <!-- Channel Information -->
                                            <div class="col">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div>
                                                        <h6 class="card-title mb-1">
                                                            @channel.Name
                                                            @if (channel.IsTracked)
                                                            {
                                                                <span class="badge bg-success ms-2">Tracked</span>
                                                            }
                                                        </h6>
                                                        <div class="text-muted small mb-2">
                                                            <i class="bi bi-people me-1"></i>
                                                            @channel.SubscriberCountDisplay subscribers
                                                            <span class="mx-2">•</span>
                                                            <i class="bi bi-play-circle me-1"></i>
                                                            @channel.VideoCountDisplay videos
                                                        </div>
                                                        <p class="card-text small text-muted mb-0">
                                                            @channel.ShortDescription
                                                        </p>
                                                    </div>

                                                    <!-- Action Buttons -->
                                                    <div class="ms-3">
                                                        <div class="d-flex flex-column gap-2">
                                                            @if (!channel.IsTracked)
                                                            {
                                                                <button type="button"
                                                                        class="btn btn-outline-primary btn-sm"
                                                                        @onclick="() => AddToTracking(channel)"
                                                                        disabled="@IsAddingChannel">
                                                                    @if (IsAddingChannel && _channelBeingAdded?.YouTubeChannelId == channel.YouTubeChannelId)
                                                                    {
                                                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="bi bi-plus-circle me-1"></i>
                                                                    }
                                                                    Add to Tracking
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button type="button" class="btn btn-success btn-sm" disabled>
                                                                    <i class="bi bi-check-circle me-1"></i>
                                                                    Already Tracked
                                                                </button>
                                                            }

                                                            <a href="@channel.YouTubeUrl"
                                                               target="_blank"
                                                               class="btn btn-outline-secondary btn-sm">
                                                                <i class="bi bi-youtube me-1"></i>
                                                                View on YouTube
                                                            </a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter]
    public EventCallback OnChannelAdded { get; set; }

    private ChannelSearchModel SearchModel { get; set; } = new();
    private List<ChannelDisplayModel> SearchResults { get; set; } = new();
    private bool IsSearching { get; set; } = false;
    private bool IsAddingChannel { get; set; } = false;
    private bool HasSearched { get; set; } = false;
    private string LastSearchQuery { get; set; } = string.Empty;
    private ChannelDisplayModel? _channelBeingAdded;

    /// <summary>
    /// Handles the search form submission.
    /// For now, shows mock data - will implement real search in next phase.
    /// </summary>
    private async Task HandleSearch()
    {
        if (IsSearching) return;

        try
        {
            IsSearching = true;
            HasSearched = true;
            LastSearchQuery = SearchModel.SearchQuery;
            StateHasChanged();

            // Simulate API delay
            await Task.Delay(1500);

            // Mock search results for UI demonstration
            SearchResults = GenerateMockSearchResults(SearchModel.SearchQuery);
        }
        finally
        {
            IsSearching = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Handles adding a channel to the user's tracking list.
    /// For now, shows UI feedback only - will implement real functionality in next phase.
    /// </summary>
    private async Task AddToTracking(ChannelDisplayModel channel)
    {
        if (IsAddingChannel) return;

        try
        {
            IsAddingChannel = true;
            _channelBeingAdded = channel;
            StateHasChanged();

            // Simulate adding to tracking
            await Task.Delay(1000);

            // Update the channel to show as tracked
            channel.IsTracked = true;
            channel.TrackedSince = DateTime.UtcNow;

            // Notify parent component
            if (OnChannelAdded.HasDelegate)
            {
                await OnChannelAdded.InvokeAsync();
            }

            // Show success message (placeholder)
            // Will integrate with MessageCenterService in next phase
        }
        finally
        {
            IsAddingChannel = false;
            _channelBeingAdded = null;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Generates mock search results for UI demonstration.
    /// Will be replaced with real YouTube API integration.
    /// </summary>
    private static List<ChannelDisplayModel> GenerateMockSearchResults(string searchQuery)
    {
        var random = new Random();
        var mockChannels = new List<ChannelDisplayModel>();

        // Generate 3-5 mock results based on search query
        var resultCount = random.Next(3, 6);

        for (int i = 0; i < resultCount; i++)
        {
            var subscriberCount = (ulong)random.Next(1000, 5_000_000);
            var videoCount = (ulong)random.Next(50, 2000);

            mockChannels.Add(new ChannelDisplayModel
                {
                    Id = Guid.NewGuid(),
                    YouTubeChannelId = $"UC{Guid.NewGuid().ToString("N")[..22]}",
                    Name = $"{searchQuery} Channel {i + 1}",
                    Description = $"This is a mock channel description for {searchQuery}. This channel covers topics related to {searchQuery} and provides educational content for viewers interested in learning more about this subject.",
                    ThumbnailUrl = $"https://via.placeholder.com/88x88/0066CC/FFFFFF?text={searchQuery[0]}",
                    SubscriberCount = subscriberCount,
                    VideoCount = videoCount,
                    PublishedAt = DateTime.UtcNow.AddDays(-random.Next(365, 3650)),
                    IsTracked = i == 0 && random.NextDouble() > 0.7 // Randomly make first result tracked sometimes
                });
        }

        return mockChannels;
    }
}
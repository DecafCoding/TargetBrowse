@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TargetBrowse.Features.Channels.Models
@using TargetBrowse.Features.Channels.Services
@inject IChannelService ChannelService
@attribute [Authorize]

@rendermode InteractiveServer

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="bi bi-search me-2"></i>
            Search YouTube Channels
        </h5>
    </div>
    <div class="card-body">
        <!-- Search Form -->
        <EditForm Model="@SearchModel" OnValidSubmit="@HandleSearch">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="searchQuery" class="form-label">Channel Name or YouTube URL</label>
                <div class="input-group">
                    <InputText @bind-Value="SearchModel.SearchQuery"
                               class="form-control"
                               id="searchQuery"
                               placeholder="Enter channel name or paste YouTube channel URL..."
                               disabled="@IsSearching" />
                    <button type="submit"
                            class="btn btn-primary"
                            disabled="@IsSearching">
                        @if (IsSearching)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="bi bi-search me-2"></i>
                        }
                        Search
                    </button>
                </div>
                <ValidationMessage For="@(() => SearchModel.SearchQuery)" class="text-danger" />
                <div class="form-text">
                    <i class="bi bi-info-circle me-1"></i>
                    Search by channel name or paste a YouTube channel URL (youtube.com/channel/, youtube.com/, etc.)
                </div>
            </div>
        </EditForm>

        <!-- Search Results -->
        @if (HasSearched)
        {
            @if (SearchResults.Any())
            {
                <div class="mt-4">
                    <h6 class="mb-3">
                        <i class="bi bi-list-ul me-2"></i>
                        Search Results (@SearchResults.Count found)
                    </h6>
                    
                    <div class="row g-3">
                        @foreach (var channel in SearchResults)
                        {
                            <div class="col-12">
                                <div class="card border">
                                    <div class="card-body">
                                        <div class="row align-items-center">
                                            <!-- Channel Info -->
                                            <div class="col-md-8">
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(channel.ThumbnailUrl))
                                                    {
                                                        <img src="@channel.ThumbnailUrl"
                                                             alt="@channel.Name thumbnail"
                                                             class="rounded me-3"
                                                             style="width: 60px; height: 60px; object-fit: cover;" />
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-secondary rounded me-3 d-flex align-items-center justify-content-center"
                                                             style="width: 60px; height: 60px;">
                                                            <i class="bi bi-person-circle text-white fs-4"></i>
                                                        </div>
                                                    }
                                                    <div>
                                                        <h6 class="mb-1">@channel.Name</h6>
                                                        <p class="text-muted small mb-1">@channel.ShortDescription</p>
                                                        <div class="d-flex gap-3 small text-muted">
                                                            <span>
                                                                <i class="bi bi-people me-1"></i>
                                                                @channel.SubscriberCountDisplay subscribers
                                                            </span>
                                                            <span>
                                                                <i class="bi bi-play-circle me-1"></i>
                                                                @channel.VideoCountDisplay videos
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Action Buttons -->
                                            <div class="col-md-4 text-md-end mt-2 mt-md-0">
                                                <div class="d-flex flex-column flex-md-row gap-2 justify-content-md-end">
                                                    <a href="@channel.YouTubeUrl"
                                                       target="_blank"
                                                       class="btn btn-outline-secondary btn-sm"
                                                       title="View on YouTube">
                                                        <i class="bi bi-youtube me-1"></i>
                                                        View
                                                    </a>
                                                    <button type="button"
                                                            class="btn btn-primary btn-sm"
                                                            @onclick="() => AddChannelToTracking(channel)"
                                                            disabled="@(IsAdding && _channelBeingAdded?.YouTubeChannelId == channel.YouTubeChannelId)">
                                                        @if (IsAdding && _channelBeingAdded?.YouTubeChannelId == channel.YouTubeChannelId)
                                                        {
                                                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                                            <text>Adding...</text>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-plus-circle me-1"></i>
                                                            <text>Track</text>
                                                        }
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (!IsSearching)
            {
                <!-- No Results -->
                <div class="mt-4 text-center py-4">
                    <i class="bi bi-search text-muted" style="font-size: 3rem;"></i>
                    <h6 class="mt-3 text-muted">No channels found</h6>
                    <p class="text-muted small mb-0">
                        Try a different search term or check your URL format. Make sure the channel exists and is public.
                    </p>
                </div>
            }
        }
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter]
    public EventCallback OnChannelAdded { get; set; }

    private ChannelSearchModel SearchModel { get; set; } = new();
    private List<ChannelDisplayModel> SearchResults { get; set; } = new();
    private bool IsSearching { get; set; } = false;
    private bool IsAdding { get; set; } = false;
    private bool HasSearched { get; set; } = false;
    private ChannelDisplayModel? _channelBeingAdded;

    /// <summary>
    /// Handles the search form submission.
    /// </summary>
    private async Task HandleSearch()
    {
        if (IsSearching) return;

        try
        {
            IsSearching = true;
            HasSearched = false;
            SearchResults.Clear();
            StateHasChanged();

            // Perform the search
            var results = await ChannelService.SearchChannelsAsync(SearchModel.SearchQuery);
            SearchResults = results ?? new List<ChannelDisplayModel>();
            HasSearched = true;

            // Clear search form if results found
            if (SearchResults.Any())
            {
                SearchModel.Reset();
            }
        }
        finally
        {
            IsSearching = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Adds a channel to the user's tracking list.
    /// </summary>
    private async Task AddChannelToTracking(ChannelDisplayModel channel)
    {
        if (IsAdding) return;

        try
        {
            IsAdding = true;
            _channelBeingAdded = channel;
            StateHasChanged();

            // Get current user
            var authState = await AuthenticationStateTask!;
            var userId = authState?.User?.FindFirstValue(ClaimTypes.NameIdentifier);

            if (string.IsNullOrEmpty(userId))
            {
                // This shouldn't happen with [Authorize] attribute, but safety first
                return;
            }

            // Convert to AddChannelModel and add to tracking
            var addChannelModel = AddChannelModel.FromDisplayModel(channel);
            var success = await ChannelService.AddChannelToTrackingAsync(userId, addChannelModel);

            if (success)
            {
                // Remove the added channel from search results
                SearchResults.Remove(channel);

                // Notify parent component that a channel was added
                if (OnChannelAdded.HasDelegate)
                {
                    await OnChannelAdded.InvokeAsync();
                }
            }
        }
        finally
        {
            IsAdding = false;
            _channelBeingAdded = null;
            StateHasChanged();
        }
    }
}

<style>
    /* Search result cards */
    .card.border {
        border: 1px solid var(--bs-border-color) !important;
        transition: box-shadow 0.2s ease, border-color 0.2s ease;
    }

        .card.border:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border-color: var(--bs-primary);
        }

    /* Channel thumbnail styling */
    .card img {
        border: 1px solid var(--bs-border-color);
    }

    /* Search input styling */
    .input-group .form-control:focus {
        border-color: var(--bs-primary);
        box-shadow: none;
    }

    .input-group .btn-primary {
        border-color: var(--bs-primary);
    }

    /* Loading states */
    .btn:disabled {
        cursor: not-allowed;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .card-body .row {
            text-align: center;
        }

        .d-flex.align-items-center {
            flex-direction: column;
            text-align: center;
        }

            .d-flex.align-items-center img,
            .d-flex.align-items-center > div:first-child {
                margin-bottom: 1rem;
                margin-right: 0 !important;
            }

        .btn-group-vertical .btn {
            margin-bottom: 0.5rem;
        }
    }

    /* Dark theme adjustments */
    [data-bs-theme="dark"] .card.border {
        border-color: var(--bs-gray-600) !important;
    }

        [data-bs-theme="dark"] .card.border:hover {
            border-color: var(--bs-primary);
            box-shadow: 0 2px 8px rgba(255, 255, 255, 0.1);
        }
</style>